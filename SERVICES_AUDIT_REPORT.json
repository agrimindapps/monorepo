{
  "audit_metadata": {
    "generated_at": "2025-10-02T00:00:00Z",
    "auditor": "Code Intelligence Agent - Sonnet 4.5",
    "scope": "Complete audit of app-level services vs packages/core",
    "apps_analyzed": ["app-gasometer", "app-plantis", "app-petiveti"],
    "core_services_count": 67,
    "methodology": "Automated import counting + manual categorization + functional analysis"
  },
  "executive_summary": {
    "total_services_analyzed": 63,
    "total_unused": 6,
    "total_duplicated_with_core": 4,
    "total_migration_candidates": 11,
    "total_app_specific": 26,
    "total_duplicate_versions": 10,
    "critical_findings": [
      "Plantis has 7 backup-related services - complex subsystem that could be extracted to core",
      "Plantis has 4 notification service versions - consolidation needed",
      "Gasometer has 3 data cleaner versions - consolidation needed",
      "Secure storage duplicated in Plantis - should use core enhanced version",
      "6 completely unused services found across apps"
    ],
    "recommendations": [
      "IMMEDIATE: Remove 6 unused services to reduce maintenance burden",
      "HIGH: Consolidate duplicate service versions in both apps",
      "MEDIUM: Migrate 11 generic services to core package",
      "LOW: Refactor app-specific services to use core equivalents where possible"
    ]
  },
  "app-gasometer": {
    "total_files": 27,
    "health_score": 7.5,
    "maintainability": "Medium",
    "technical_debt": "Medium",
    "services_breakdown": {
      "app_specific_correct": {
        "count": 14,
        "services": [
          {
            "filename": "financial_conflict_resolver.dart",
            "usage_count": 3,
            "category": "app_specific",
            "reason": "Financial domain-specific conflict resolution logic",
            "recommendation": "KEEP - Core business logic"
          },
          {
            "filename": "financial_validator.dart",
            "usage_count": 3,
            "category": "app_specific",
            "reason": "Financial domain validation rules",
            "recommendation": "KEEP - Core business logic"
          },
          {
            "filename": "financial_sync_service.dart",
            "usage_count": 3,
            "category": "app_specific",
            "reason": "Financial records synchronization",
            "recommendation": "KEEP - Uses gasometer_sync_service from core"
          },
          {
            "filename": "financial_core.dart",
            "usage_count": 0,
            "category": "app_specific",
            "reason": "Financial domain core aggregator",
            "recommendation": "INVESTIGATE - 0 usage, might be obsolete or in development"
          },
          {
            "filename": "fuel_business_service.dart",
            "usage_count": 0,
            "category": "app_specific",
            "reason": "Fuel supply business logic",
            "recommendation": "INVESTIGATE - 0 usage, might be obsolete"
          },
          {
            "filename": "expense_business_service.dart",
            "usage_count": 0,
            "category": "app_specific",
            "reason": "Expense management business logic",
            "recommendation": "INVESTIGATE - 0 usage, might be obsolete"
          },
          {
            "filename": "receipt_image_service.dart",
            "usage_count": 4,
            "category": "app_specific",
            "reason": "Receipt-specific image handling with compression",
            "recommendation": "KEEP - Domain-specific, uses core image services"
          },
          {
            "filename": "gasometer_analytics_service.dart",
            "usage_count": 9,
            "category": "app_specific",
            "reason": "App-specific analytics events and tracking",
            "recommendation": "KEEP - Wraps core analytics with app events"
          },
          {
            "filename": "local_data_service.dart",
            "usage_count": 4,
            "category": "app_specific",
            "reason": "App-specific Hive box data access layer",
            "recommendation": "KEEP - Domain data access"
          },
          {
            "filename": "unified_validators.dart",
            "usage_count": 2,
            "category": "app_specific",
            "reason": "App-specific validation logic for forms",
            "recommendation": "KEEP - Domain validators"
          },
          {
            "filename": "unified_formatters.dart",
            "usage_count": 1,
            "category": "app_specific",
            "reason": "App-specific text formatters",
            "recommendation": "KEEP - Domain formatters"
          },
          {
            "filename": "input_sanitizer.dart",
            "usage_count": 10,
            "category": "app_specific",
            "reason": "Financial data sanitization (XSS, SQL injection prevention)",
            "recommendation": "KEEP - Security critical, heavily used"
          },
          {
            "filename": "audit_trail_service.dart",
            "usage_count": 3,
            "category": "app_specific",
            "reason": "Financial audit trail for compliance",
            "recommendation": "KEEP - Business requirement"
          },
          {
            "filename": "auth_rate_limiter.dart",
            "usage_count": 3,
            "category": "app_specific",
            "reason": "Authentication rate limiting",
            "recommendation": "KEEP - Security feature"
          }
        ]
      },
      "duplicated_with_core": {
        "count": 2,
        "services": [
          {
            "filename": "firebase_storage_service.dart",
            "usage_count": 1,
            "category": "duplicated",
            "core_equivalent": "packages/core/lib/src/infrastructure/services/firebase_storage_service.dart",
            "reason": "Similar functionality to core FirebaseStorageService but receipt-specific",
            "recommendation": "REFACTOR - Could extend core service instead of reimplementing",
            "impact": "Medium",
            "effort_hours": 2
          },
          {
            "filename": "database_inspector_service.dart",
            "usage_count": 3,
            "category": "wrapper",
            "core_equivalent": "packages/core/lib/src/infrastructure/services/database_inspector_service.dart",
            "reason": "Correctly wraps core DatabaseInspectorService with app-specific box registrations",
            "recommendation": "KEEP - This is the correct pattern for app-specific integration",
            "impact": "None",
            "effort_hours": 0
          }
        ]
      },
      "candidates_for_core": {
        "count": 4,
        "services": [
          {
            "filename": "avatar_service.dart",
            "usage_count": 2,
            "category": "migration_candidate",
            "reason": "Generic avatar/profile image processing with compression and validation - not fuel-specific",
            "recommendation": "MIGRATE to core as ProfileImageService or enhance existing profile_image_service.dart",
            "impact": "Low",
            "effort_hours": 4,
            "benefits": "Reusable across all apps needing profile images"
          },
          {
            "filename": "image_picker_service.dart",
            "usage_count": 1,
            "category": "migration_candidate",
            "reason": "Generic image picker wrapper with permissions",
            "recommendation": "MIGRATE to core - could enhance existing image services",
            "impact": "Low",
            "effort_hours": 2,
            "benefits": "Standardize image picking across apps"
          },
          {
            "filename": "platform_service.dart",
            "usage_count": 3,
            "category": "migration_candidate",
            "reason": "Generic platform detection and capabilities",
            "recommendation": "MIGRATE to core as PlatformCapabilitiesService",
            "impact": "Low",
            "effort_hours": 2,
            "benefits": "Centralize platform-specific logic"
          },
          {
            "filename": "data_sanitization_service.dart",
            "usage_count": 1,
            "category": "migration_candidate",
            "reason": "Generic data sanitization (though currently has financial focus)",
            "recommendation": "CONSIDER - Could be generalized and moved to core",
            "impact": "Low",
            "effort_hours": 3,
            "benefits": "Security sanitization across all apps"
          }
        ]
      },
      "unused_or_obsolete": {
        "count": 3,
        "services": [
          {
            "filename": "startup_sync_service.dart",
            "usage_count": 0,
            "category": "unused",
            "reason": "No imports found in codebase",
            "recommendation": "DELETE - Unused code increases maintenance burden",
            "impact": "None",
            "effort_hours": 0.5
          },
          {
            "filename": "gasometer_firebase_service.dart",
            "usage_count": 0,
            "category": "unused",
            "reason": "No imports found in codebase",
            "recommendation": "DELETE - Likely superseded by core services",
            "impact": "None",
            "effort_hours": 0.5
          },
          {
            "filename": "gasometer_notification_service.dart",
            "usage_count": 0,
            "category": "unused",
            "reason": "No imports found in codebase",
            "recommendation": "DELETE - Likely superseded by core notification services",
            "impact": "None",
            "effort_hours": 0.5
          }
        ]
      },
      "duplicate_or_refactored": {
        "count": 3,
        "services": [
          {
            "filename": "data_cleaner_service.dart",
            "usage_count": 7,
            "category": "duplicate_version",
            "duplicate_of": ["gasometer_data_cleaner.dart", "gasometer_data_cleaner_service.dart"],
            "reason": "Three versions of data cleaner exist",
            "recommendation": "CONSOLIDATE - Keep most used version (this one with 7 uses), deprecate others",
            "impact": "Medium",
            "effort_hours": 4
          },
          {
            "filename": "gasometer_data_cleaner.dart",
            "usage_count": 1,
            "category": "duplicate_version",
            "reason": "One of three data cleaner versions",
            "recommendation": "DEPRECATE and migrate to data_cleaner_service.dart",
            "impact": "Low",
            "effort_hours": 1
          },
          {
            "filename": "gasometer_data_cleaner_service.dart",
            "usage_count": 1,
            "category": "duplicate_version",
            "reason": "One of three data cleaner versions",
            "recommendation": "DEPRECATE and migrate to data_cleaner_service.dart",
            "impact": "Low",
            "effort_hours": 1
          }
        ]
      },
      "test_or_dev": {
        "count": 1,
        "services": [
          {
            "filename": "data_generator_service.dart",
            "usage_count": 1,
            "category": "test_utility",
            "reason": "Test data generation for development",
            "recommendation": "KEEP but move to test/ directory if only used in tests",
            "impact": "None",
            "effort_hours": 0.5
          }
        ]
      }
    },
    "quick_wins": [
      {
        "action": "Delete 3 unused services",
        "files": ["startup_sync_service.dart", "gasometer_firebase_service.dart", "gasometer_notification_service.dart"],
        "impact": "High",
        "effort": "30 minutes",
        "roi": "Very High"
      },
      {
        "action": "Consolidate data cleaner services",
        "files": ["data_cleaner_service.dart", "gasometer_data_cleaner.dart", "gasometer_data_cleaner_service.dart"],
        "impact": "Medium",
        "effort": "2 hours",
        "roi": "High"
      }
    ]
  },
  "app-plantis": {
    "total_files": 34,
    "health_score": 6.0,
    "maintainability": "Low-Medium",
    "technical_debt": "High",
    "services_breakdown": {
      "app_specific_correct": {
        "count": 10,
        "services": [
          {
            "filename": "plants_care_calculator.dart",
            "usage_count": 4,
            "category": "app_specific",
            "reason": "Plant-specific watering and care calculation logic",
            "recommendation": "KEEP - Core business logic"
          },
          {
            "filename": "plants_data_service.dart",
            "usage_count": 4,
            "category": "app_specific",
            "reason": "Plant data management and CRUD operations",
            "recommendation": "KEEP - Domain data access"
          },
          {
            "filename": "plants_filter_service.dart",
            "usage_count": 4,
            "category": "app_specific",
            "reason": "Plant filtering and search logic",
            "recommendation": "KEEP - Domain logic"
          },
          {
            "filename": "task_generation_service.dart",
            "usage_count": 3,
            "category": "app_specific",
            "reason": "Plant care task generation based on schedules",
            "recommendation": "KEEP - Core feature"
          },
          {
            "filename": "task_notification_service.dart",
            "usage_count": 4,
            "category": "app_specific",
            "reason": "Plant task-specific notifications",
            "recommendation": "KEEP - Core feature"
          },
          {
            "filename": "plantis_notification_service.dart",
            "usage_count": 12,
            "category": "app_specific",
            "reason": "Main notification service for plant reminders",
            "recommendation": "KEEP - Heavily used, core feature"
          },
          {
            "filename": "notification_manager.dart",
            "usage_count": 3,
            "category": "app_specific",
            "reason": "Notification coordination and scheduling",
            "recommendation": "KEEP - Orchestrates notification services"
          },
          {
            "filename": "plantis_notification_config.dart",
            "usage_count": 2,
            "category": "app_specific",
            "reason": "Notification configuration and settings",
            "recommendation": "KEEP - Configuration management"
          },
          {
            "filename": "conflict_history_service.dart",
            "usage_count": 2,
            "category": "app_specific",
            "reason": "Plant data conflict tracking and history",
            "recommendation": "KEEP - Data integrity"
          },
          {
            "filename": "plantis_realtime_service.dart",
            "usage_count": 1,
            "category": "app_specific",
            "reason": "Realtime plant data updates",
            "recommendation": "KEEP - Real-time features"
          }
        ]
      },
      "duplicated_with_core": {
        "count": 2,
        "services": [
          {
            "filename": "secure_storage_service.dart",
            "usage_count": 7,
            "category": "duplicated",
            "core_equivalent": "packages/core/lib/src/infrastructure/services/enhanced_secure_storage_service.dart",
            "reason": "Local implementation with custom classes (UserCredentials, LocationData, PersonalInfo) - core has enhanced version with app-specific configs",
            "recommendation": "MIGRATE to core EnhancedSecureStorageService - it supports app-specific configs",
            "impact": "High - heavily used",
            "effort_hours": 6,
            "migration_steps": [
              "1. Create custom serializers for UserCredentials, LocationData, PersonalInfo",
              "2. Initialize EnhancedSecureStorageService with SecureStorageConfig.plantis()",
              "3. Replace all imports across 7 usage locations",
              "4. Test thoroughly - security critical"
            ]
          },
          {
            "filename": "data_sanitization_service.dart",
            "usage_count": 4,
            "category": "duplicated",
            "core_equivalent": "packages/core/lib/src/infrastructure/services/validation_service.dart",
            "reason": "Data validation and sanitization - core has validation_service",
            "recommendation": "REFACTOR to use core validation_service and extend if needed",
            "impact": "Medium",
            "effort_hours": 3
          }
        ]
      },
      "candidates_for_core": {
        "count": 7,
        "services": [
          {
            "filename": "form_validation_service.dart",
            "usage_count": 3,
            "category": "migration_candidate",
            "reason": "Generic form validation with common patterns",
            "recommendation": "MIGRATE to core - enhance validation_service",
            "impact": "Low",
            "effort_hours": 3,
            "benefits": "Standardize validation across apps"
          },
          {
            "filename": "image_management_service.dart",
            "usage_count": 3,
            "category": "migration_candidate",
            "reason": "Generic image CRUD operations",
            "recommendation": "MIGRATE to core - could enhance existing image services",
            "impact": "Medium",
            "effort_hours": 4,
            "benefits": "Centralize image management"
          },
          {
            "filename": "enhanced_image_cache_manager.dart",
            "usage_count": 1,
            "category": "migration_candidate",
            "reason": "Image caching with memory management",
            "recommendation": "MIGRATE to core - enhance cache_management_service",
            "impact": "Low",
            "effort_hours": 3,
            "benefits": "Better image performance across apps"
          },
          {
            "filename": "image_preloader_service.dart",
            "usage_count": 2,
            "category": "migration_candidate",
            "reason": "Image preloading for performance",
            "recommendation": "MIGRATE to core",
            "impact": "Low",
            "effort_hours": 2,
            "benefits": "Improve UX across apps"
          },
          {
            "filename": "memory_monitoring_service.dart",
            "usage_count": 1,
            "category": "migration_candidate",
            "reason": "Generic memory monitoring and alerts",
            "recommendation": "MIGRATE to core as part of performance_service",
            "impact": "Low",
            "effort_hours": 2,
            "benefits": "Monitor memory across all apps"
          },
          {
            "filename": "url_launcher_service.dart",
            "usage_count": 1,
            "category": "migration_candidate",
            "reason": "Generic URL launching wrapper",
            "recommendation": "MIGRATE to core",
            "impact": "Low",
            "effort_hours": 1,
            "benefits": "Standardize external links"
          },
          {
            "filename": "data_cleaner_service.dart",
            "usage_count": 2,
            "category": "migration_candidate",
            "reason": "Generic data cleaning and normalization",
            "recommendation": "MIGRATE to core",
            "impact": "Low",
            "effort_hours": 2,
            "benefits": "Data quality across apps"
          }
        ]
      },
      "unused_or_obsolete": {
        "count": 3,
        "services": [
          {
            "filename": "plantis_notification_service_legacy.dart",
            "usage_count": 0,
            "category": "unused",
            "reason": "Legacy version - no imports found",
            "recommendation": "DELETE - Technical debt",
            "impact": "None",
            "effort_hours": 0.5
          },
          {
            "filename": "auth_security_service.dart",
            "usage_count": 0,
            "category": "unused",
            "reason": "No imports found - likely superseded by core security_service",
            "recommendation": "DELETE",
            "impact": "None",
            "effort_hours": 0.5
          },
          {
            "filename": "encrypted_hive_service.dart",
            "usage_count": 0,
            "category": "unused",
            "reason": "No imports found - core has enhanced_encrypted_storage_service",
            "recommendation": "DELETE",
            "impact": "None",
            "effort_hours": 0.5
          }
        ]
      },
      "backup_services_complex": {
        "count": 7,
        "critical_finding": "Complex backup subsystem with 7 services - candidate for extraction to core package",
        "services": [
          {
            "filename": "backup_service.dart",
            "usage_count": 6,
            "category": "complex_subsystem",
            "reason": "Main backup orchestration",
            "recommendation": "KEEP for now - Consider extracting entire backup subsystem to core"
          },
          {
            "filename": "backup_service_refactored.dart",
            "usage_count": 1,
            "category": "refactored_version",
            "reason": "Refactored version of backup service",
            "recommendation": "CONSOLIDATE with backup_service.dart - determine which is current"
          },
          {
            "filename": "backup_restore_service.dart",
            "usage_count": 5,
            "category": "complex_subsystem",
            "reason": "Backup restoration operations",
            "recommendation": "KEEP - Part of backup subsystem"
          },
          {
            "filename": "backup_scheduler.dart",
            "usage_count": 1,
            "category": "complex_subsystem",
            "reason": "Backup scheduling logic",
            "recommendation": "KEEP - Part of backup subsystem"
          },
          {
            "filename": "backup_validation_service.dart",
            "usage_count": 4,
            "category": "complex_subsystem",
            "reason": "Backup integrity validation",
            "recommendation": "KEEP - Part of backup subsystem"
          },
          {
            "filename": "backup_audit_service.dart",
            "usage_count": 4,
            "category": "complex_subsystem",
            "reason": "Backup audit trail and logging",
            "recommendation": "KEEP - Part of backup subsystem"
          },
          {
            "filename": "backup_data_transformer_service.dart",
            "usage_count": 4,
            "category": "complex_subsystem",
            "reason": "Backup data transformation and migration",
            "recommendation": "KEEP - Part of backup subsystem"
          }
        ],
        "strategic_recommendation": {
          "action": "Extract backup subsystem to packages/core/lib/src/backup/",
          "rationale": "7 services forming cohesive subsystem - other apps (gasometer, petiveti) could benefit",
          "impact": "High - enables backup feature across all apps",
          "effort_hours": 16,
          "priority": "Medium",
          "benefits": [
            "Centralize backup logic",
            "Enable cross-app backup features",
            "Reduce code duplication",
            "Standardize backup patterns"
          ]
        }
      },
      "notification_services_multiple": {
        "count": 4,
        "critical_finding": "4 notification service versions - consolidation urgently needed",
        "services": [
          {
            "filename": "plantis_notification_service.dart",
            "usage_count": 12,
            "category": "active",
            "reason": "Current main notification service - heavily used",
            "recommendation": "KEEP - Primary version"
          },
          {
            "filename": "plantis_notification_service_v2.dart",
            "usage_count": 1,
            "category": "version",
            "reason": "V2 version with minimal usage",
            "recommendation": "CONSOLIDATE into main or deprecate - determine intent"
          },
          {
            "filename": "plantis_notification_service_legacy.dart",
            "usage_count": 0,
            "category": "legacy",
            "reason": "Legacy version - unused",
            "recommendation": "DELETE - Technical debt"
          },
          {
            "filename": "enhanced_plantis_notification_service.dart",
            "usage_count": 2,
            "category": "enhanced",
            "reason": "Enhanced version with extra features",
            "recommendation": "CONSOLIDATE into main service - merge enhancements"
          }
        ],
        "strategic_recommendation": {
          "action": "Consolidate notification services into single enhanced version",
          "rationale": "4 versions create confusion and maintenance burden",
          "impact": "High - reduces complexity significantly",
          "effort_hours": 8,
          "priority": "High",
          "benefits": [
            "Single source of truth",
            "Easier to maintain",
            "Clear upgrade path",
            "Reduced technical debt"
          ]
        }
      },
      "sync_services": {
        "count": 3,
        "services": [
          {
            "filename": "background_sync_service.dart",
            "usage_count": 2,
            "category": "app_specific",
            "reason": "Plant-specific background sync",
            "recommendation": "KEEP - Works with core plantis_sync_service"
          },
          {
            "filename": "offline_sync_queue_service.dart",
            "usage_count": 2,
            "category": "app_specific",
            "reason": "Offline queue management for plant data",
            "recommendation": "KEEP - Offline-first pattern"
          },
          {
            "filename": "sync_coordinator_service.dart",
            "usage_count": 2,
            "category": "app_specific",
            "reason": "Coordinates sync operations",
            "recommendation": "KEEP - Orchestration layer"
          }
        ]
      }
    },
    "quick_wins": [
      {
        "action": "Delete 3 unused services",
        "files": ["plantis_notification_service_legacy.dart", "auth_security_service.dart", "encrypted_hive_service.dart"],
        "impact": "High",
        "effort": "30 minutes",
        "roi": "Very High"
      },
      {
        "action": "Migrate secure_storage_service to core",
        "files": ["secure_storage_service.dart"],
        "impact": "High - 7 usages",
        "effort": "6 hours",
        "roi": "High"
      },
      {
        "action": "Consolidate notification services",
        "files": ["plantis_notification_service.dart", "plantis_notification_service_v2.dart", "enhanced_plantis_notification_service.dart"],
        "impact": "Very High",
        "effort": "8 hours",
        "roi": "Very High"
      }
    ]
  },
  "app-petiveti": {
    "total_files": 2,
    "health_score": 9.0,
    "maintainability": "High",
    "technical_debt": "Very Low",
    "services_breakdown": {
      "app_specific": {
        "count": 1,
        "services": [
          {
            "filename": "petiveti_data_cleaner.dart",
            "usage_count": 0,
            "category": "app_specific",
            "reason": "Pet-specific data cleaning logic",
            "recommendation": "INVESTIGATE - 0 usage, might be in development or obsolete"
          }
        ]
      },
      "integration_layer": {
        "count": 1,
        "services": [
          {
            "filename": "core_services_integration.dart",
            "usage_count": 0,
            "category": "integration",
            "reason": "Integration layer for core package services",
            "recommendation": "INVESTIGATE - 0 usage suggests app is properly using core services directly"
          }
        ]
      }
    },
    "observation": "Petiveti shows excellent core package integration with minimal app-level services. This is the target state for other apps.",
    "quick_wins": [
      {
        "action": "Verify if 2 services are needed or can be deleted",
        "files": ["petiveti_data_cleaner.dart", "core_services_integration.dart"],
        "impact": "Low",
        "effort": "1 hour",
        "roi": "Medium"
      }
    ]
  },
  "summary": {
    "total_services_analyzed": 63,
    "total_app_specific_correct": 26,
    "total_unused": 6,
    "total_duplicated": 4,
    "total_migration_candidates": 11,
    "total_duplicate_versions": 10,
    "total_test_utilities": 1,
    "total_complex_subsystems": 1,
    "apps_health_ranking": [
      {
        "app": "app-petiveti",
        "score": 9.0,
        "status": "Excellent"
      },
      {
        "app": "app-gasometer",
        "score": 7.5,
        "status": "Good"
      },
      {
        "app": "app-plantis",
        "score": 6.0,
        "status": "Needs Improvement"
      }
    ],
    "critical_actions": {
      "immediate_p0": [
        {
          "action": "Delete 6 unused services",
          "apps": ["gasometer", "plantis"],
          "effort_hours": 3,
          "impact": "Reduce maintenance burden"
        }
      ],
      "high_priority_p1": [
        {
          "action": "Consolidate Plantis notification services (4 versions → 1)",
          "apps": ["plantis"],
          "effort_hours": 8,
          "impact": "Major technical debt reduction"
        },
        {
          "action": "Consolidate Gasometer data cleaner services (3 versions → 1)",
          "apps": ["gasometer"],
          "effort_hours": 6,
          "impact": "Code clarity and maintainability"
        },
        {
          "action": "Migrate Plantis secure_storage to core",
          "apps": ["plantis"],
          "effort_hours": 6,
          "impact": "Use enhanced core version, reduce duplication"
        }
      ],
      "medium_priority_p2": [
        {
          "action": "Migrate 11 generic services to core",
          "apps": ["gasometer", "plantis"],
          "effort_hours": 30,
          "impact": "Increase code reuse, enable features across apps"
        },
        {
          "action": "Extract Plantis backup subsystem to core",
          "apps": ["plantis"],
          "effort_hours": 16,
          "impact": "Enable backup across all apps"
        }
      ]
    },
    "roi_analysis": {
      "quick_wins_total_effort": 17.5,
      "quick_wins_total_impact": "Very High",
      "quick_wins_roi": "Excellent - High impact, low effort",
      "medium_term_total_effort": 46,
      "medium_term_total_impact": "High",
      "medium_term_roi": "Good - Significant architectural improvements",
      "total_potential_effort_savings": "~80 hours over next 6 months from reduced maintenance"
    }
  },
  "detailed_recommendations": {
    "phase_1_cleanup": {
      "duration": "1 week",
      "effort_hours": 20,
      "actions": [
        "Delete 6 unused services",
        "Consolidate Gasometer data cleaners (3→1)",
        "Consolidate Plantis notifications (4→1)",
        "Document which services are canonical"
      ]
    },
    "phase_2_migration": {
      "duration": "2-3 weeks",
      "effort_hours": 40,
      "actions": [
        "Migrate Plantis secure_storage to core",
        "Migrate avatar_service to core",
        "Migrate platform_service to core",
        "Migrate image-related services to core",
        "Test cross-app compatibility"
      ]
    },
    "phase_3_architecture": {
      "duration": "3-4 weeks",
      "effort_hours": 50,
      "actions": [
        "Extract Plantis backup subsystem to core",
        "Refactor Gasometer firebase_storage to use core",
        "Create migration guides for remaining services",
        "Establish service creation guidelines"
      ]
    }
  },
  "packages_core_integration_analysis": {
    "current_state": {
      "gasometer_integration": "Medium - Uses some core services but has duplications",
      "plantis_integration": "Low - Minimal core usage, many local implementations",
      "petiveti_integration": "Excellent - Properly leverages core package"
    },
    "target_state": {
      "description": "All apps should follow Petiveti model - minimal app-level services, maximum core reuse",
      "benefits": [
        "Faster feature development",
        "Consistent behavior across apps",
        "Easier maintenance and updates",
        "Better test coverage (test once in core)",
        "Reduced technical debt"
      ]
    },
    "migration_path": {
      "step_1": "Identify and delete unused services",
      "step_2": "Consolidate duplicate versions within each app",
      "step_3": "Migrate generic services to core",
      "step_4": "Refactor app services to extend/wrap core services",
      "step_5": "Document patterns and guidelines"
    }
  }
}
