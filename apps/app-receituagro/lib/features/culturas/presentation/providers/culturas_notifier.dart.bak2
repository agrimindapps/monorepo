import 'package:core/core.dart';

import '../../../../core/di/injection_container.dart' as di;
import '../../domain/entities/cultura_entity.dart';
import '../../domain/usecases/get_culturas_usecase.dart';
import 'culturas_state.dart';

part 'culturas_notifier.g.dart';
}

/// Notifier para gerenciar estado das culturas
/// Segue padrões Clean Architecture + Riverpod
@riverpod
class CulturasNotifier extends _$CulturasNotifier {
  late final GetCulturasUseCase _getCulturasUseCase;
  late final GetCulturasByGrupoUseCase _getCulturasByGrupoUseCase;
  late final SearchCulturasUseCase _searchCulturasUseCase;
  late final GetGruposCulturasUseCase _getGruposCulturasUseCase;

  @override
  Future<CulturasState> build() async {
    _getCulturasUseCase = di.sl<GetCulturasUseCase>();
    _getCulturasByGrupoUseCase = di.sl<GetCulturasByGrupoUseCase>();
    _searchCulturasUseCase = di.sl<SearchCulturasUseCase>();
    _getGruposCulturasUseCase = di.sl<GetGruposCulturasUseCase>();

    return CulturasState.initial();
  }

  /// Carrega todas as culturas
  Future<void> loadCulturas() async {
    final currentState = state.value;
    if (currentState == null) return;

    state = AsyncValue.data(currentState.copyWith(isLoading: true).clearError());

    try {
      final result = await _getCulturasUseCase.call(const NoParams());

      result.fold(
        (failure) {
          state = AsyncValue.data(
            currentState.copyWith(
              isLoading: false,
              errorMessage: _mapFailureToMessage(failure),
            ),
          );
        },
        (culturas) {
          state = AsyncValue.data(
            currentState.copyWith(
              isLoading: false,
              culturas: culturas,
              filteredCulturas: culturas,
            ).clearError(),
          );
          _loadGrupos();
        },
      );
    } catch (e) {
      state = AsyncValue.data(
        currentState.copyWith(
          isLoading: false,
          errorMessage: e.toString(),
        ),
      );
    }
  }

  /// Carrega grupos de culturas
  Future<void> _loadGrupos() async {
    final currentState = state.value;
    if (currentState == null) return;

    try {
      final result = await _getGruposCulturasUseCase.call(const NoParams());

      result.fold(
        (failure) {
          print('Erro ao carregar grupos: ${failure.toString()}');
        },
        (grupos) {
          state = AsyncValue.data(currentState.copyWith(grupos: grupos));
        },
      );
    } catch (e) {
      print('Erro ao carregar grupos: $e');
    }
  }

  /// Filtra culturas por pesquisa
  Future<void> searchCulturas(String query) async {
    final currentState = state.value;
    if (currentState == null) return;

    state = AsyncValue.data(currentState.copyWith(searchQuery: query, isLoading: true).clearError());

    try {
      final result = await _searchCulturasUseCase.call(query);

      result.fold(
        (failure) {
          state = AsyncValue.data(
            currentState.copyWith(
              isLoading: false,
              errorMessage: _mapFailureToMessage(failure),
            ),
          );
        },
        (culturas) {
          state = AsyncValue.data(
            currentState.copyWith(
              isLoading: false,
              filteredCulturas: culturas,
            ).clearError(),
          );
        },
      );
    } catch (e) {
      state = AsyncValue.data(
        currentState.copyWith(
          isLoading: false,
          errorMessage: e.toString(),
        ),
      );
    }
  }

  /// Filtra culturas por grupo
  Future<void> filterByGrupo(String grupo) async {
    final currentState = state.value;
    if (currentState == null) return;

    state = AsyncValue.data(currentState.copyWith(selectedGrupo: grupo, isLoading: true).clearError());

    if (grupo.isEmpty) {
      state = AsyncValue.data(
        currentState.copyWith(
          filteredCulturas: currentState.culturas,
          isLoading: false,
        ).clearError(),
      );
      return;
    }

    try {
      final result = await _getCulturasByGrupoUseCase.call(grupo);

      result.fold(
        (failure) {
          state = AsyncValue.data(
            currentState.copyWith(
              isLoading: false,
              errorMessage: _mapFailureToMessage(failure),
            ),
          );
        },
        (culturas) {
          state = AsyncValue.data(
            currentState.copyWith(
              isLoading: false,
              filteredCulturas: culturas,
            ).clearError(),
          );
        },
      );
    } catch (e) {
      state = AsyncValue.data(
        currentState.copyWith(
          isLoading: false,
          errorMessage: e.toString(),
        ),
      );
    }
  }

  /// Limpa filtros
  void clearFilters() {
    final currentState = state.value;
    if (currentState == null) return;

    state = AsyncValue.data(
      currentState.copyWith(
        searchQuery: '',
        selectedGrupo: '',
        filteredCulturas: currentState.culturas,
      ),
    );
  }

  /// Limpa erro
  void clearError() {
    final currentState = state.value;
    if (currentState == null) return;

    state = AsyncValue.data(currentState.clearError());
  }

  String _mapFailureToMessage(Failure failure) {
    switch (failure.runtimeType) {
      case ServerFailure:
        return 'Erro do servidor. Tente novamente.';
      case CacheFailure:
        return 'Erro ao acessar dados locais.';
      case NetworkFailure:
        return 'Erro de conexão. Verifique sua internet.';
      default:
        return 'Erro inesperado. Tente novamente.';
    }
  }
}
