import 'dart:async';

import 'package:core/core.dart';
import 'package:flutter/foundation.dart';

/// Rastreador de progresso de migra√ß√£o
///
/// Responsabilidade: Gerenciar e emitir atualiza√ß√µes de progresso
/// Aplica SRP (Single Responsibility Principle)
@LazySingleton()
class MigrationProgressTracker {
  final StreamController<MigrationProgress> _progressController =
      StreamController<MigrationProgress>.broadcast();

  /// Stream de progresso da migra√ß√£o
  Stream<MigrationProgress> get progressStream => _progressController.stream;

  /// Emite atualiza√ß√£o de progresso
  void emitProgress({
    required double percentage,
    required String operation,
    String? details,
    Duration? estimatedTime,
  }) {
    if (kDebugMode) {
      debugPrint(
        'üìä Migration Progress: ${(percentage * 100).toInt()}% - $operation',
      );
    }

    _progressController.add(
      MigrationProgress(
        percentage: percentage,
        currentOperation: operation,
        details: details,
      ),
    );
  }

  /// Emite progresso inicial
  void emitInitial() {
    emitProgress(percentage: 0.0, operation: 'Iniciando migra√ß√£o');
  }

  /// Emite progresso de conclus√£o
  void emitCompleted({String? message}) {
    emitProgress(percentage: 1.0, operation: message ?? 'Migra√ß√£o conclu√≠da');
  }

  /// Emite progresso de cancelamento
  void emitCancelled() {
    emitProgress(percentage: 0.0, operation: 'Migra√ß√£o cancelada');
  }

  /// Emite progresso de erro
  void emitError(String errorMessage) {
    emitProgress(
      percentage: 0.0,
      operation: 'Erro durante migra√ß√£o',
      details: errorMessage,
    );
  }

  /// Limpa recursos
  void dispose() {
    _progressController.close();
  }
}
