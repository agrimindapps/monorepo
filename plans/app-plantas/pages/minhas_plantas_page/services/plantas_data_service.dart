// Flutter imports:
import 'package:flutter/material.dart';

// Package imports:
import 'package:get/get.dart';

// Project imports:
import '../../../database/planta_model.dart';
import '../../../services/domain/plants/plant_care_service.dart';
import 'plantas_state_service.dart';

/// Servi√ßo especializado para carregamento e sincroniza√ß√£o de dados de plantas
/// Separado do controller para melhor organiza√ß√£o de responsabilidades
class PlantasDataService extends GetxService {
  static PlantasDataService get instance => Get.find<PlantasDataService>();

  PlantasStateService get _stateService => PlantasStateService.instance;

  /// Inicializa o servi√ßo
  Future<void> initialize() async {
    debugPrint('üîß PlantasDataService: Inicializando...');
    await PlantCareService.instance.initialize();
    debugPrint('‚úÖ PlantasDataService: Inicializado com sucesso');
  }

  /// Carrega todos os dados necess√°rios
  Future<void> loadAllData() async {
    try {
      debugPrint('üìä PlantasDataService: Iniciando carregamento de dados');
      await _stateService.loadData();
      debugPrint('‚úÖ PlantasDataService: Carregamento conclu√≠do');
    } catch (e) {
      debugPrint('‚ùå PlantasDataService: Erro ao carregar dados: $e');
      _showErrorSnackbar('Erro ao carregar dados', e.toString());
      rethrow;
    }
  }

  /// For√ßa recarregamento completo dos dados
  Future<void> forceReload() async {
    try {
      debugPrint('üîÑ PlantasDataService: For√ßando recarregamento completo');
      await _stateService.forceReload();
      debugPrint('‚úÖ PlantasDataService: Recarregamento conclu√≠do');
    } catch (e) {
      debugPrint('‚ùå PlantasDataService: Erro no recarregamento: $e');
      _showErrorSnackbar('Erro ao recarregar dados', e.toString());
      rethrow;
    }
  }

  /// Sincroniza dados com a fonte remota/local
  Future<void> syncData() async {
    try {
      debugPrint('üîÑ PlantasDataService: Sincronizando dados');

      // Recarregar plantas
      await _loadPlantas();

      // Recarregar espa√ßos
      await _loadEspacos();

      debugPrint('‚úÖ PlantasDataService: Sincroniza√ß√£o conclu√≠da');
    } catch (e) {
      debugPrint('‚ùå PlantasDataService: Erro na sincroniza√ß√£o: $e');
      _showErrorSnackbar('Erro na sincroniza√ß√£o', e.toString());
      rethrow;
    }
  }

  /// Remove uma planta do sistema
  Future<void> removePlanta(PlantaModel planta) async {
    try {
      debugPrint('üóëÔ∏è PlantasDataService: Removendo planta: ${planta.nome}');

      await PlantCareService.instance.initialize();
      await PlantCareService.instance.deletePlant(planta.id);

      // Atualizar estado centralizado
      await _stateService.removePlanta(planta.id);

      _showSuccessSnackbar('Planta "${planta.nome}" removida com sucesso!');
      debugPrint('‚úÖ PlantasDataService: Planta removida: ${planta.nome}');
    } catch (e) {
      debugPrint('‚ùå PlantasDataService: Erro ao remover planta: $e');
      _showErrorSnackbar('Erro ao remover planta', e.toString());
      rethrow;
    }
  }

  /// Obt√©m nome do espa√ßo por ID
  String getEspacoName(String? espacoId) {
    if (espacoId == null || espacoId.isEmpty) return 'Sem espa√ßo';

    final espaco = _stateService.getEspaco(espacoId);
    return espaco?.nome ?? 'Espa√ßo n√£o encontrado';
  }

  /// Carrega plantas do servi√ßo de cuidados
  Future<void> _loadPlantas() async {
    // PlantasStateService j√° tem a l√≥gica de carregamento
    // Delegamos para o m√©todo loadData existente
    await _stateService.loadData(silent: true);
  }

  /// Carrega espa√ßos do servi√ßo de cuidados
  Future<void> _loadEspacos() async {
    // PlantasStateService j√° tem a l√≥gica de carregamento
    // Delegamos para o m√©todo loadData existente
    await _stateService.loadData(silent: true);
  }

  /// Mostra snackbar de sucesso
  void _showSuccessSnackbar(String message) {
    Get.snackbar(
      'Sucesso',
      message,
      snackPosition: SnackPosition.BOTTOM,
      backgroundColor: const Color(0xFF20B2AA),
      colorText: Colors.white,
      duration: const Duration(seconds: 2),
    );
  }

  /// Mostra snackbar de erro
  void _showErrorSnackbar(String title, String message) {
    Get.snackbar(
      title,
      message,
      snackPosition: SnackPosition.BOTTOM,
      backgroundColor: Colors.red,
      colorText: Colors.white,
      duration: const Duration(seconds: 3),
    );
  }
}
