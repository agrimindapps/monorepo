// Project imports:
import 'security_service.dart';

/// Servi√ßo respons√°vel por valida√ß√µes de neg√≥cio para c√°lculo de volume sangu√≠neo
///
/// Este servi√ßo centraliza todas as regras de valida√ß√£o, incluindo verifica√ß√£o
/// de campos obrigat√≥rios, formatos v√°lidos e ranges biologicamente plaus√≠veis.
///
/// üîí IMPLEMENTA ISSUE #3 - SECURITY: Integra valida√ß√£o robusta de seguran√ßa
class VolumeSanguineoValidationService {
  /// Valida se o peso informado est√° dentro dos par√¢metros v√°lidos
  ///
  /// Retorna uma string com erro se inv√°lido, ou null se v√°lido
  ///
  /// üîí SEGURAN√áA: Utiliza valida√ß√£o robusta contra ataques maliciosos
  String? validatePeso(String pesoText) {
    if (pesoText.isEmpty) {
      return 'Necess√°rio informar o peso.';
    }

    // üîí IMPLEMENTA√á√ÉO ISSUE #3: Valida√ß√£o de seguran√ßa avan√ßada
    final securityResult =
        VolumeSanguineoSecurityService.validatePesoSecurity(pesoText);

    if (!securityResult.isSecure) {
      // Log da viola√ß√£o de seguran√ßa para monitoramento
      VolumeSanguineoSecurityService.logSecurityViolation(
        input: pesoText,
        reason: securityResult.vulnerabilityReason ?? 'Entrada insegura',
        threatLevel: securityResult.threatLevel,
        fieldName: 'peso',
      );

      // Retorna mensagem user-friendly baseada no n√≠vel de amea√ßa
      switch (securityResult.threatLevel) {
        case SecurityThreatLevel.high:
        case SecurityThreatLevel.critical:
          return 'Entrada rejeitada por quest√µes de seguran√ßa.';
        case SecurityThreatLevel.medium:
          return 'Valor num√©rico inv√°lido ou muito extremo.';
        case SecurityThreatLevel.low:
        default:
          return securityResult.vulnerabilityReason ??
              'Formato de peso inv√°lido.';
      }
    }

    // Usa valor sanitizado se dispon√≠vel
    final valorProcessar = securityResult.sanitizedValue ?? pesoText;

    try {
      final peso = double.parse(valorProcessar.replaceAll(',', '.'));

      if (peso <= 0) {
        return 'O peso deve ser maior que zero.';
      }

      // Valida√ß√£o adicional de range biol√≥gico (al√©m da valida√ß√£o de seguran√ßa)
      if (peso < 0.5) {
        return 'Peso muito baixo. M√≠nimo: 0.5kg (prematuros extremos).';
      }

      if (peso > 700) {
        return 'Peso muito alto. M√°ximo: 700kg (casos extremos documentados).';
      }

      return null; // Peso v√°lido e seguro
    } catch (e) {
      return 'Erro ao processar peso. Verifique o formato num√©rico.';
    }
  }

  /// Valida se o tipo de pessoa foi selecionado
  String? validateTipoPessoa(Map<String, dynamic>? generoDef) {
    if (generoDef == null || generoDef.isEmpty) {
      return 'Necess√°rio selecionar o tipo de pessoa.';
    }
    return null;
  }

  /// Verifica se a entrada cont√©m padr√µes potencialmente maliciosos
  ///
  /// üîí SEGURAN√áA: Detec√ß√£o precoce de tentativas maliciosas
  bool hasPotentialSecurityThreat(String input) {
    return VolumeSanguineoSecurityService.isPotentiallyMalicious(input);
  }

  /// Sanitiza entrada preservando apenas caracteres num√©ricos v√°lidos
  ///
  /// üîí SEGURAN√áA: Limpeza autom√°tica de dados de entrada
  String sanitizeNumericInput(String input) {
    final securityResult =
        VolumeSanguineoSecurityService.validatePesoSecurity(input);
    return securityResult.sanitizedValue ?? input;
  }

  /// Valida todos os campos necess√°rios para o c√°lculo
  ///
  /// Retorna o primeiro erro encontrado ou null se tudo estiver v√°lido
  ///
  /// üîí SEGURAN√áA: Inclui valida√ß√£o de seguran√ßa robusta
  String? validateAllFields(String pesoText, Map<String, dynamic>? generoDef) {
    // Valida tipo de pessoa primeiro
    final tipoPessoaError = validateTipoPessoa(generoDef);
    if (tipoPessoaError != null) {
      return tipoPessoaError;
    }

    // üîí Verifica√ß√£o de seguran√ßa precoce
    if (hasPotentialSecurityThreat(pesoText)) {
      // Log da tentativa maliciosa
      VolumeSanguineoSecurityService.logSecurityViolation(
        input: pesoText,
        reason: 'Entrada potencialmente maliciosa detectada na valida√ß√£o geral',
        threatLevel: SecurityThreatLevel.medium,
        fieldName: 'peso_geral',
      );
      return 'Entrada rejeitada por quest√µes de seguran√ßa.';
    }

    // Valida peso com verifica√ß√µes de seguran√ßa
    final pesoError = validatePeso(pesoText);
    if (pesoError != null) {
      return pesoError;
    }

    return null; // Todos os campos v√°lidos e seguros
  }
}
