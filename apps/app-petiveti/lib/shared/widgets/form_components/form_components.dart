/// **PetiVeti Form Components Library**
///
/// Biblioteca completa de componentes de formul√°rio reutiliz√°veis para o app PetiVeti.
/// Inspirada no sucesso da componentiza√ß√£o do app-gasometer.
///
/// ## üéØ Objetivo
/// Reduzir duplica√ß√£o de c√≥digo, aumentar consist√™ncia visual e melhorar
/// a manutenibilidade dos formul√°rios atrav√©s de componentes padronizados.
///
/// ## üì¶ Componentes Inclu√≠dos
///
/// ### **Campos (Fields)**
/// - `AnimalSelectorField`: Sele√ß√£o de animais com interface rica
/// - `DateTimePickerField`: Pickers de data/hora unificados
/// - `NotesField`: Campos de observa√ß√µes padronizados
/// - `TypeDropdownField`: Dropdowns com √≠cones e cores
///
/// ### **Se√ß√µes (Sections)**
/// - `FormSubmitSection`: Bot√µes de submit/cancel consistentes
///
/// ## üöÄ Uso
///
/// ```dart
/// // Importa√ß√£o √∫nica
/// import 'package:app_petiveti/shared/widgets/form_components/form_components.dart';
///
/// // Uso direto dos componentes
/// AnimalSelectorField.required(
///   value: selectedAnimalId,
///   onChanged: (id) => setState(() => selectedAnimalId = id),
/// )
///
/// DateTimePickerField.birthDate(
///   value: birthDate,
///   onChanged: (date) => setState(() => birthDate = date),
/// )
///
/// NotesField.general(
///   controller: notesController,
/// )
///
/// FormSubmitSection.create(
///   onSubmit: _handleSubmit,
///   isLoading: isSubmitting,
///   itemName: 'Pet',
/// )
/// ```
///
/// ## üìà Benef√≠cios Esperados
/// - **Redu√ß√£o de 40-60% do c√≥digo**: Baseado no sucesso do gasometer
/// - **Consist√™ncia Visual**: Interface unificada entre formul√°rios
/// - **Manutenibilidade**: Mudan√ßas centralizadas
/// - **Produtividade**: Desenvolvimento mais r√°pido
/// - **Qualidade**: Componentes testados e validados
///
/// @author PetiVeti Development Team
/// @since 1.0.0
library;

import 'package:flutter/material.dart';

import 'fields/animal_selector_field.dart';
import 'fields/date_time_picker_field.dart';
import 'fields/notes_field.dart';
import 'fields/type_dropdown_field.dart';
import 'sections/form_submit_section.dart';

/// Componentes originais do FormComponents
export '../form_components.dart';
/// Sele√ß√£o de animais com interface rica
export 'fields/animal_selector_field.dart';
/// Pickers de data/hora unificados
export 'fields/date_time_picker_field.dart';
/// Campos de observa√ß√µes padronizados
export 'fields/notes_field.dart';
/// Dropdowns com √≠cones e cores
export 'fields/type_dropdown_field.dart';
/// Se√ß√µes de submit/cancel consistentes
export 'sections/form_submit_section.dart';

/// **PetiVeti Form Components**
///
/// Classe principal que agrupa todos os componentes para f√°cil acesso.
/// Oferece m√©todos est√°ticos para cria√ß√£o r√°pida de componentes comuns.
class PetiVetiFormComponents {
  PetiVetiFormComponents._();

  /// Seletor de animal obrigat√≥rio
  static Widget animalRequired({
    String? value,
    ValueChanged<String?>? onChanged,
    String? label,
  }) {
    return AnimalSelectorFieldExtensions.required(
      value: value,
      onChanged: onChanged,
      label: label ?? 'Animal',
    );
  }

  /// Seletor de animal opcional
  static Widget animalOptional({
    String? value,
    ValueChanged<String?>? onChanged,
    String? label,
  }) {
    return AnimalSelectorFieldExtensions.optional(
      value: value,
      onChanged: onChanged,
      label: label ?? 'Animal (Opcional)',
    );
  }

  /// Data de nascimento
  static Widget birthDate({
    DateTime? value,
    ValueChanged<DateTime?>? onChanged,
  }) {
    return DateTimePickerFieldExtensions.birthDate(
      value: value,
      onChanged: onChanged,
    );
  }

  /// Agendamento
  static Widget appointment({
    DateTime? value,
    ValueChanged<DateTime?>? onChanged,
  }) {
    return DateTimePickerFieldExtensions.appointment(
      value: value,
      onChanged: onChanged,
    );
  }

  /// Per√≠odo de tratamento
  static Widget treatmentPeriod({
    DateTime? startValue,
    DateTime? endValue,
    void Function(DateTime? start, DateTime? end)? onRangeChanged,
  }) {
    return DateTimePickerFieldExtensions.treatmentPeriod(
      startValue: startValue,
      endValue: endValue,
      onRangeChanged: onRangeChanged,
    );
  }

  /// Observa√ß√µes gerais
  static Widget notesGeneral({
    TextEditingController? controller,
    String? initialValue,
    ValueChanged<String>? onChanged,
    bool isRequired = false,
  }) {
    return NotesFieldVariants.general(
      controller: controller,
      initialValue: initialValue,
      onChanged: onChanged,
      isRequired: isRequired,
    );
  }

  /// Observa√ß√µes m√©dicas
  static Widget notesMedical({
    TextEditingController? controller,
    String? initialValue,
    ValueChanged<String>? onChanged,
    bool isRequired = false,
  }) {
    return NotesFieldVariants.medical(
      controller: controller,
      initialValue: initialValue,
      onChanged: onChanged,
      isRequired: isRequired,
    );
  }

  /// Observa√ß√µes de tratamento
  static Widget notesTreatment({
    TextEditingController? controller,
    String? initialValue,
    ValueChanged<String>? onChanged,
    bool isRequired = false,
  }) {
    return NotesFieldVariants.treatment(
      controller: controller,
      initialValue: initialValue,
      onChanged: onChanged,
      isRequired: isRequired,
    );
  }

  /// Se√ß√£o para criar
  static Widget submitCreate({
    required VoidCallback? onSubmit,
    VoidCallback? onCancel,
    bool isLoading = false,
    String? itemName,
  }) {
    return FormSubmitSectionVariants.create(
      onSubmit: onSubmit,
      onCancel: onCancel,
      isLoading: isLoading,
      itemName: itemName,
    );
  }

  /// Se√ß√£o para editar
  static Widget submitUpdate({
    required VoidCallback? onSubmit,
    VoidCallback? onCancel,
    bool isLoading = false,
  }) {
    return FormSubmitSectionVariants.update(
      onSubmit: onSubmit,
      onCancel: onCancel,
      isLoading: isLoading,
    );
  }

  /// Se√ß√£o simples
  static Widget submitSimple({
    required VoidCallback? onSubmit,
    bool isLoading = false,
    String? text,
    IconData? icon,
  }) {
    return FormSubmitSectionVariants.simple(
      onSubmit: onSubmit,
      isLoading: isLoading,
      text: text,
      icon: icon,
    );
  }

  /// Dropdown de prioridade
  static Widget priorityDropdown({
    String? value,
    ValueChanged<String?>? onChanged,
    String? label,
    bool isRequired = false,
  }) {
    return PriorityDropdownField(
      value: value,
      onChanged: onChanged,
      label: label,
      isRequired: isRequired,
    );
  }

  /// Dropdown de tipo de lembrete
  static Widget reminderTypeDropdown({
    String? value,
    ValueChanged<String?>? onChanged,
    String? label,
    bool isRequired = false,
  }) {
    return ReminderTypeDropdownField(
      value: value,
      onChanged: onChanged,
      label: label,
      isRequired: isRequired,
    );
  }

  /// Dropdown de tipo de medicamento
  static Widget medicationTypeDropdown({
    String? value,
    ValueChanged<String?>? onChanged,
    String? label,
    bool isRequired = false,
  }) {
    return MedicationTypeDropdownField(
      value: value,
      onChanged: onChanged,
      label: label,
      isRequired: isRequired,
    );
  }
}

/// Alias para facilitar importa√ß√£o
typedef PVC = PetiVetiFormComponents;
