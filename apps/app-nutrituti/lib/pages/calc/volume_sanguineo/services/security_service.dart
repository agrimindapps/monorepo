// Flutter imports:
import 'package:flutter/foundation.dart';

/// Servi√ßo de seguran√ßa para valida√ß√£o robusta de entrada de dados
///
/// Este servi√ßo implementa valida√ß√µes de seguran√ßa avan√ßadas para prevenir
/// vulnerabilidades, ataques de inje√ß√£o e entrada de dados maliciosos.
///
/// üîí IMPLEMENTA ISSUE #3 - SECURITY: Valida√ß√£o robusta de entrada
class VolumeSanguineoSecurityService {
  // Padr√µes maliciosos comuns
  static final List<RegExp> _maliciousPatterns = [
    RegExp(r'<[^>]*script[^>]*>', caseSensitive: false),
    RegExp(r'javascript:', caseSensitive: false),
    RegExp(r'vbscript:', caseSensitive: false),
    RegExp(r'onload\s*=', caseSensitive: false),
    RegExp(r'onerror\s*=', caseSensitive: false),
    RegExp(r'eval\s*\(', caseSensitive: false),
    RegExp(r'alert\s*\(', caseSensitive: false),
    RegExp(r'document\.', caseSensitive: false),
    RegExp(r'window\.', caseSensitive: false),
    RegExp(r'<%.*%>', caseSensitive: false),
    RegExp(r'<\?.*\?>', caseSensitive: false),
    RegExp(r'\$\{.*\}', caseSensitive: false),
    RegExp(r'@@.*@@', caseSensitive: false),
  ];

  // Caracteres permitidos para entrada num√©rica
  static final RegExp _allowedNumericChars = RegExp(r'^[\d\s,.\-+]*$');

  // Padr√£o para n√∫meros v√°lidos
  static final RegExp _validNumberPattern =
      RegExp(r'^[+-]?(\d+([.,]\d*)?|\.\d+)$');

  /// Resultado da valida√ß√£o de seguran√ßa
  static SecurityValidationResult validateSecureNumericInput(
    String input, {
    required String fieldName,
    bool allowNegative = false,
    double? minValue,
    double? maxValue,
    int? maxLength,
  }) {
    // 1. Verifica√ß√£o de entrada vazia
    if (input.isEmpty) {
      return SecurityValidationResult.secure('');
    }

    // 2. Verifica√ß√£o de tamanho excessivo (poss√≠vel DoS)
    final maxAllowedLength = maxLength ?? 20;
    if (input.length > maxAllowedLength) {
      return SecurityValidationResult.insecure(
        reason: 'Entrada muito longa - poss√≠vel tentativa de DoS',
        threatLevel: SecurityThreatLevel.medium,
      );
    }

    // 3. Detec√ß√£o de padr√µes maliciosos
    for (final pattern in _maliciousPatterns) {
      if (pattern.hasMatch(input)) {
        return SecurityValidationResult.insecure(
          reason: 'Padr√£o malicioso detectado - poss√≠vel tentativa de inje√ß√£o',
          threatLevel: SecurityThreatLevel.high,
        );
      }
    }

    // 4. Verifica√ß√£o de caracteres permitidos
    if (!_allowedNumericChars.hasMatch(input)) {
      return SecurityValidationResult.insecure(
        reason: 'Caracteres n√£o permitidos detectados',
        threatLevel: SecurityThreatLevel.low,
        sanitizedValue: _sanitizeInput(input),
      );
    }

    // 5. Sanitiza√ß√£o b√°sica
    final sanitized = _sanitizeInput(input);

    // 6. Valida√ß√£o de formato num√©rico
    if (!_validNumberPattern.hasMatch(sanitized)) {
      return SecurityValidationResult.insecure(
        reason: 'Formato num√©rico inv√°lido',
        threatLevel: SecurityThreatLevel.low,
        sanitizedValue: sanitized,
      );
    }

    // 7. Verifica√ß√£o de parsing seguro
    double? parsedValue;
    try {
      parsedValue = double.parse(sanitized.replaceAll(',', '.'));
    } catch (e) {
      return SecurityValidationResult.insecure(
        reason: 'Erro ao processar valor num√©rico',
        threatLevel: SecurityThreatLevel.low,
        sanitizedValue: sanitized,
      );
    }

    // 8. Verifica√ß√£o de valores extremos (poss√≠vel overflow)
    if (parsedValue.isInfinite || parsedValue.isNaN) {
      return SecurityValidationResult.insecure(
        reason: 'Valor num√©rico inv√°lido (Infinity/NaN)',
        threatLevel: SecurityThreatLevel.medium,
      );
    }

    // 9. Verifica√ß√£o de valores negativos se n√£o permitidos
    if (!allowNegative && parsedValue < 0) {
      return SecurityValidationResult.insecure(
        reason: 'Valores negativos n√£o s√£o permitidos para $fieldName',
        threatLevel: SecurityThreatLevel.low,
        sanitizedValue: parsedValue.abs().toString(),
      );
    }

    // 10. Verifica√ß√£o de limites de valor
    if (minValue != null && parsedValue < minValue) {
      return SecurityValidationResult.insecure(
        reason: 'Valor abaixo do m√≠nimo permitido ($minValue)',
        threatLevel: SecurityThreatLevel.low,
      );
    }

    if (maxValue != null && parsedValue > maxValue) {
      return SecurityValidationResult.insecure(
        reason: 'Valor acima do m√°ximo permitido ($maxValue)',
        threatLevel: SecurityThreatLevel.medium,
      );
    }

    // 11. Verifica√ß√£o de precis√£o excessiva (poss√≠vel DoS)
    if (_hasExcessivePrecision(sanitized)) {
      return SecurityValidationResult.insecure(
        reason: 'Precis√£o decimal excessiva detectada',
        threatLevel: SecurityThreatLevel.low,
        sanitizedValue: _limitPrecision(parsedValue),
      );
    }

    return SecurityValidationResult.secure(sanitized);
  }

  /// Valida√ß√£o espec√≠fica para peso corporal
  static SecurityValidationResult validatePesoSecurity(String input) {
    return validateSecureNumericInput(
      input,
      fieldName: 'peso corporal',
      allowNegative: false,
      minValue: 0.5, // Prematuros extremos
      maxValue: 700.0, // Casos extremos documentados
      maxLength: 10,
    );
  }

  /// Sanitiza entrada removendo caracteres perigosos
  static String _sanitizeInput(String input) {
    return input
        .replaceAll(RegExp(r'[^\d\s,.\-+]'), '') // Remove n√£o-num√©ricos
        .replaceAll(RegExp(r'\s+'), ' ') // Normaliza espa√ßos
        .trim();
  }

  /// Verifica se h√° precis√£o decimal excessiva
  static bool _hasExcessivePrecision(String input) {
    if (input.contains('.') || input.contains(',')) {
      final parts = input.replaceAll(',', '.').split('.');
      if (parts.length == 2) {
        return parts[1].length > 4; // M√°ximo 4 casas decimais
      }
    }
    return false;
  }

  /// Limita a precis√£o decimal
  static String _limitPrecision(double value, {int precision = 2}) {
    final factor = 10.0 * precision;
    final rounded = (value * factor).round() / factor;
    return rounded.toString();
  }

  /// Log de viola√ß√µes de seguran√ßa (para monitoramento)
  static void logSecurityViolation({
    required String input,
    required String reason,
    required SecurityThreatLevel threatLevel,
    String? fieldName,
  }) {
    // Em produ√ß√£o, isso enviaria para um sistema de logging/monitoramento
    debugPrint('üîí SECURITY VIOLATION: $reason');
    debugPrint('   Field: ${fieldName ?? "unknown"}');
    debugPrint('   Threat Level: ${threatLevel.name}');
    debugPrint('   Input Length: ${input.length}');
    debugPrint('   Timestamp: ${DateTime.now().toIso8601String()}');
  }

  /// Verifica se a entrada √© potencialmente maliciosa
  static bool isPotentiallyMalicious(String input) {
    final result = validateSecureNumericInput(input, fieldName: 'test');
    return !result.isSecure &&
        result.threatLevel.index >= SecurityThreatLevel.medium.index;
  }

  /// Obt√©m estat√≠sticas de seguran√ßa para an√°lise
  static Map<String, dynamic> getSecurityStats(List<String> inputs) {
    int totalInputs = inputs.length;
    int secureInputs = 0;
    int maliciousInputs = 0;
    Map<SecurityThreatLevel, int> threatLevels = {};

    for (final input in inputs) {
      final result = validateSecureNumericInput(input, fieldName: 'analysis');
      if (result.isSecure) {
        secureInputs++;
      } else {
        if (result.threatLevel.index >= SecurityThreatLevel.medium.index) {
          maliciousInputs++;
        }
        threatLevels[result.threatLevel] =
            (threatLevels[result.threatLevel] ?? 0) + 1;
      }
    }

    return {
      'total_inputs': totalInputs,
      'secure_inputs': secureInputs,
      'malicious_inputs': maliciousInputs,
      'security_ratio': totalInputs > 0 ? secureInputs / totalInputs : 0.0,
      'threat_levels': threatLevels.map((k, v) => MapEntry(k.name, v)),
    };
  }
}

/// Resultado de valida√ß√£o de seguran√ßa
class SecurityValidationResult {
  final bool isSecure;
  final String? vulnerabilityReason;
  final String? sanitizedValue;
  final SecurityThreatLevel threatLevel;

  const SecurityValidationResult({
    required this.isSecure,
    this.vulnerabilityReason,
    this.sanitizedValue,
    this.threatLevel = SecurityThreatLevel.none,
  });

  factory SecurityValidationResult.secure(String sanitizedValue) {
    return SecurityValidationResult(
      isSecure: true,
      sanitizedValue: sanitizedValue,
      threatLevel: SecurityThreatLevel.none,
    );
  }

  factory SecurityValidationResult.insecure({
    required String reason,
    required SecurityThreatLevel threatLevel,
    String? sanitizedValue,
  }) {
    return SecurityValidationResult(
      isSecure: false,
      vulnerabilityReason: reason,
      sanitizedValue: sanitizedValue,
      threatLevel: threatLevel,
    );
  }
}

/// N√≠veis de amea√ßa de seguran√ßa
enum SecurityThreatLevel {
  none, // Nenhuma amea√ßa
  low, // Amea√ßa baixa - entrada malformada
  medium, // Amea√ßa m√©dia - poss√≠vel DoS ou overflow
  high, // Amea√ßa alta - tentativa de inje√ß√£o
  critical // Amea√ßa cr√≠tica - padr√£o malicioso conhecido
}
