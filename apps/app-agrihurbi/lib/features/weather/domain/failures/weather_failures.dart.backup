import 'package:equatable/equatable.dart';

/// Base class for all weather-related failures
abstract class WeatherFailure extends Equatable {
  const WeatherFailure();

  @override
  List<Object> get props => [];
}

// ============================================================================
// WEATHER MEASUREMENT FAILURES
// ============================================================================

/// Generic weather data failure
class WeatherDataFailure extends WeatherFailure {
  final String message;
  
  const WeatherDataFailure([this.message = 'Weather data operation failed']);

  @override
  List<Object> get props => [message];

  @override
  String toString() => 'WeatherDataFailure(message: $message)';
}

/// Failed to fetch weather measurements
class WeatherMeasurementFetchFailure extends WeatherFailure {
  final String message;
  
  const WeatherMeasurementFetchFailure([this.message = 'Failed to fetch weather measurements']);

  @override
  List<Object> get props => [message];

  @override
  String toString() => 'WeatherMeasurementFetchFailure(message: $message)';
}

/// Failed to save weather measurement
class WeatherMeasurementSaveFailure extends WeatherFailure {
  final String message;
  
  const WeatherMeasurementSaveFailure([this.message = 'Failed to save weather measurement']);

  @override
  List<Object> get props => [message];

  @override
  String toString() => 'WeatherMeasurementSaveFailure(message: $message)';
}

/// Weather measurement not found
class WeatherMeasurementNotFoundFailure extends WeatherFailure {
  final String measurementId;
  
  const WeatherMeasurementNotFoundFailure(this.measurementId);

  @override
  List<Object> get props => [measurementId];

  @override
  String toString() => 'WeatherMeasurementNotFoundFailure(measurementId: $measurementId)';
}

/// Invalid weather measurement data
class InvalidWeatherMeasurementFailure extends WeatherFailure {
  final String message;
  final List<String> validationErrors;
  
  const InvalidWeatherMeasurementFailure(
    this.message, 
    [this.validationErrors = const []]
  );

  @override
  List<Object> get props => [message, validationErrors];

  @override
  String toString() => 'InvalidWeatherMeasurementFailure(message: $message, errors: $validationErrors)';
}

// ============================================================================
// RAIN GAUGE FAILURES
// ============================================================================

/// Generic rain gauge failure
class RainGaugeFailure extends WeatherFailure {
  final String message;
  
  const RainGaugeFailure([this.message = 'Rain gauge operation failed']);

  @override
  List<Object> get props => [message];

  @override
  String toString() => 'RainGaugeFailure(message: $message)';
}

/// Failed to fetch rain gauge data
class RainGaugeFetchFailure extends WeatherFailure {
  final String message;
  
  const RainGaugeFetchFailure([this.message = 'Failed to fetch rain gauge data']);

  @override
  List<Object> get props => [message];

  @override
  String toString() => 'RainGaugeFetchFailure(message: $message)';
}

/// Failed to save rain gauge data
class RainGaugeSaveFailure extends WeatherFailure {
  final String message;
  
  const RainGaugeSaveFailure([this.message = 'Failed to save rain gauge data']);

  @override
  List<Object> get props => [message];

  @override
  String toString() => 'RainGaugeSaveFailure(message: $message)';
}

/// Rain gauge not found
class RainGaugeNotFoundFailure extends WeatherFailure {
  final String gaugeId;
  
  const RainGaugeNotFoundFailure(gaugeId);

  @override
  List<Object> get props => [gaugeId];

  @override
  String toString() => 'RainGaugeNotFoundFailure(gaugeId: $gaugeId)';
}

/// Rain gauge device communication failure
class RainGaugeDeviceFailure extends WeatherFailure {
  final String deviceId;
  final String message;
  
  const RainGaugeDeviceFailure(deviceId, [message = 'Device communication failed']);

  @override
  List<Object> get props => [deviceId, message];

  @override
  String toString() => 'RainGaugeDeviceFailure(deviceId: $deviceId, message: $message)';
}

/// Rain gauge calibration failure
class RainGaugeCalibrationFailure extends WeatherFailure {
  final String gaugeId;
  final String message;
  
  const RainGaugeCalibrationFailure(gaugeId, [message = 'Calibration failed']);

  @override
  List<Object> get props => [gaugeId, message];

  @override
  String toString() => 'RainGaugeCalibrationFailure(gaugeId: $gaugeId, message: $message)';
}

// ============================================================================
// WEATHER STATISTICS FAILURES
// ============================================================================

/// Generic weather statistics failure
class WeatherStatisticsFailure extends WeatherFailure {
  final String message;
  
  const WeatherStatisticsFailure([message = 'Weather statistics operation failed']);

  @override
  List<Object> get props => [message];

  @override
  String toString() => 'WeatherStatisticsFailure(message: $message)';
}

/// Failed to calculate weather statistics
class WeatherStatisticsCalculationFailure extends WeatherFailure {
  final String message;
  final String? period;
  
  const WeatherStatisticsCalculationFailure(
    message, 
    [period]
  );

  @override
  List<Object> get props => [message, period ?? 'unknown'];

  @override
  String toString() => 'WeatherStatisticsCalculationFailure(message: $message, period: $period)';
}

/// Insufficient data for statistics
class InsufficientWeatherDataFailure extends WeatherFailure {
  final String period;
  final int availableRecords;
  final int requiredRecords;
  
  const InsufficientWeatherDataFailure(
    period,
    availableRecords,
    requiredRecords,
  );

  @override
  List<Object> get props => [period, availableRecords, requiredRecords];

  @override
  String toString() => 
      'InsufficientWeatherDataFailure(period: $period, available: $availableRecords, required: $requiredRecords)';
}

// ============================================================================
// NETWORK AND API FAILURES
// ============================================================================

/// Network connection failure
class WeatherNetworkFailure extends WeatherFailure {
  final String message;
  
  const WeatherNetworkFailure([message = 'Network connection failed']);

  @override
  List<Object> get props => [message];

  @override
  String toString() => 'WeatherNetworkFailure(message: $message)';
}

/// Weather API service failure
class WeatherApiFailure extends WeatherFailure {
  final String service;
  final int statusCode;
  final String message;
  
  const WeatherApiFailure(
    service,
    statusCode,
    [message = 'API service failed']
  );

  @override
  List<Object> get props => [service, statusCode, message];

  @override
  String toString() => 'WeatherApiFailure(service: $service, code: $statusCode, message: $message)';
}

/// Weather API rate limit exceeded
class WeatherApiRateLimitFailure extends WeatherFailure {
  final String service;
  final DateTime retryAfter;
  
  const WeatherApiRateLimitFailure(service, retryAfter);

  @override
  List<Object> get props => [service, retryAfter];

  @override
  String toString() => 'WeatherApiRateLimitFailure(service: $service, retryAfter: $retryAfter)';
}

/// Weather API authentication failure
class WeatherApiAuthFailure extends WeatherFailure {
  final String service;
  final String message;
  
  const WeatherApiAuthFailure(service, [message = 'Authentication failed']);

  @override
  List<Object> get props => [service, message];

  @override
  String toString() => 'WeatherApiAuthFailure(service: $service, message: $message)';
}

// ============================================================================
// LOCAL STORAGE FAILURES
// ============================================================================

/// Local weather data storage failure
class WeatherLocalStorageFailure extends WeatherFailure {
  final String operation;
  final String message;
  
  const WeatherLocalStorageFailure(operation, [message = 'Local storage operation failed']);

  @override
  List<Object> get props => [operation, message];

  @override
  String toString() => 'WeatherLocalStorageFailure(operation: $operation, message: $message)';
}

/// Weather data cache failure
class WeatherCacheFailure extends WeatherFailure {
  final String message;
  
  const WeatherCacheFailure([message = 'Cache operation failed']);

  @override
  List<Object> get props => [message];

  @override
  String toString() => 'WeatherCacheFailure(message: $message)';
}

/// Weather data sync failure
class WeatherSyncFailure extends WeatherFailure {
  final String message;
  final int pendingRecords;
  
  const WeatherSyncFailure(message, [pendingRecords = 0]);

  @override
  List<Object> get props => [message, pendingRecords];

  @override
  String toString() => 'WeatherSyncFailure(message: $message, pending: $pendingRecords)';
}

// ============================================================================
// VALIDATION AND PERMISSION FAILURES
// ============================================================================

/// Location permission failure
class WeatherLocationPermissionFailure extends WeatherFailure {
  final String message;
  
  const WeatherLocationPermissionFailure([message = 'Location permission denied']);

  @override
  List<Object> get props => [message];

  @override
  String toString() => 'WeatherLocationPermissionFailure(message: $message)';
}

/// Invalid location coordinates
class InvalidLocationFailure extends WeatherFailure {
  final double latitude;
  final double longitude;
  
  const InvalidLocationFailure(latitude, longitude);

  @override
  List<Object> get props => [latitude, longitude];

  @override
  String toString() => 'InvalidLocationFailure(lat: $latitude, lng: $longitude)';
}

/// Date range validation failure
class InvalidDateRangeFailure extends WeatherFailure {
  final DateTime startDate;
  final DateTime endDate;
  final String message;
  
  const InvalidDateRangeFailure(
    startDate, 
    endDate, 
    [message = 'Invalid date range']
  );

  @override
  List<Object> get props => [startDate, endDate, message];

  @override
  String toString() => 'InvalidDateRangeFailure(start: $startDate, end: $endDate, message: $message)';
}

// ============================================================================
// DEVICE AND SENSOR FAILURES
// ============================================================================

/// Weather sensor failure
class WeatherSensorFailure extends WeatherFailure {
  final String sensorType;
  final String deviceId;
  final String message;
  
  const WeatherSensorFailure(
    sensorType,
    deviceId, 
    [message = 'Sensor malfunction']
  );

  @override
  List<Object> get props => [sensorType, deviceId, message];

  @override
  String toString() => 'WeatherSensorFailure(type: $sensorType, device: $deviceId, message: $message)';
}

/// Weather device battery failure
class WeatherDeviceBatteryFailure extends WeatherFailure {
  final String deviceId;
  final double batteryLevel;
  
  const WeatherDeviceBatteryFailure(deviceId, batteryLevel);

  @override
  List<Object> get props => [deviceId, batteryLevel];

  @override
  String toString() => 'WeatherDeviceBatteryFailure(device: $deviceId, battery: $batteryLevel%)';
}

/// Weather device offline failure
class WeatherDeviceOfflineFailure extends WeatherFailure {
  final String deviceId;
  final DateTime lastContact;
  
  const WeatherDeviceOfflineFailure(deviceId, lastContact);

  @override
  List<Object> get props => [deviceId, lastContact];

  @override
  String toString() => 'WeatherDeviceOfflineFailure(device: $deviceId, lastContact: $lastContact)';
}