// Flutter imports:
import 'package:flutter/material.dart';

// Package imports:
import 'package:get/get.dart';

// Project imports:
import '../../../../database/20_odometro_model.dart';
import '../../../../widgets/dialog_cadastro_widget.dart';
import '../bindings/odometro_cadastro_form_binding.dart';
import '../controller/odometro_cadastro_form_controller.dart';
import '../helpers/odometro_ui_helper.dart';
import '../models/odometro_constants.dart';
import '../views/odometro_cadastro_form_view.dart';

/// Fun칞칚o para abrir o dialog de cadastro/edi칞칚o de od칪metro
///
/// Agora usa binding adequado para gerenciar o lifecycle do controller
/// automaticamente, evitando vazamentos de mem칩ria e cleanup manual
Future<bool?> odometroCadastro(
  BuildContext context,
  OdometroCar? odometro,
) {
  debugPrint('游냍 [FUNCTION] odometroCadastro chamada - IN칈CIO');
  debugPrint('游냍 [FUNCTION] Context: $context');
  debugPrint('游냍 [FUNCTION] Od칪metro: $odometro');

  final formWidgetKey = GlobalKey<OdometroCadastroWrapperWidgetState>();
  debugPrint('游냍 [FUNCTION] FormWidgetKey criado: $formWidgetKey');

  // Inicializa o binding para garantir que o controller seja criado adequadamente
  debugPrint('游냍 [FUNCTION] Inicializando binding...');
  OdometroCadastroFormBinding().dependencies();
  debugPrint('游냍 [FUNCTION] Binding inicializado');

  return DialogCadastro.show(
    context: context,
    title: odometro == null ? 'Cadastrar Od칪metro' : 'Editar Od칪metro',
    formKey: formWidgetKey,
    maxHeight: OdometroConstants.dialogPreferredHeight,
    onSubmit: () {
      debugPrint('游냍 [DIALOG] onSubmit callback chamado!');
      debugPrint(
          '游냍 [DIALOG] formWidgetKey.currentState: ${formWidgetKey.currentState}');

      if (formWidgetKey.currentState != null) {
        final isLoading = formWidgetKey.currentState!.isLoading;
        debugPrint('游냍 [DIALOG] isLoading: $isLoading');

        if (!isLoading) {
          debugPrint(
              '游냍 [DIALOG] Chamando formWidgetKey.currentState!.submit()...');
          formWidgetKey.currentState!.submit();
        } else {
          debugPrint('游냍 [DIALOG] N칚o submetendo - j치 est치 loading');
        }
      } else {
        debugPrint('游냍 [DIALOG] ERRO: formWidgetKey.currentState 칠 null!');
      }
    },
    disableSubmitWhen: () {
      final disabled = formWidgetKey.currentState?.isLoading ?? false;
      debugPrint('游냍 [DIALOG] disableSubmitWhen: $disabled');
      return disabled;
    },
    formWidget: (key) {
      debugPrint('游냍 [DIALOG] formWidget callback - key recebida: $key');
      debugPrint(
          '游냍 [DIALOG] formWidget callback - key == formWidgetKey: ${key == formWidgetKey}');
      return OdometroCadastroWrapperWidget(key: key, odometro: odometro);
    },
  );
}

/// Widget de cadastro de od칪metro usando pr치ticas modernas do GetX
///
/// Usa GetView para acessar automaticamente o controller, seguindo
/// as melhores pr치ticas atuais do GetX sem gerenciamento manual
class OdometroCadastroWidget extends GetView<OdometroCadastroFormController> {
  final OdometroCar? odometro;

  const OdometroCadastroWidget({super.key, this.odometro});

  @override
  Widget build(BuildContext context) {
    return OdometroCadastroWrapperWidget(odometro: odometro);
  }
}

/// Wrapper widget para manter compatibilidade com DialogCadastro
///
/// Este widget mant칠m o estado necess치rio para a interface do DialogCadastro
/// enquanto usa GetView internamente para seguir pr치ticas modernas
class OdometroCadastroWrapperWidget extends StatefulWidget {
  final OdometroCar? odometro;

  OdometroCadastroWrapperWidget({super.key, this.odometro}) {
    debugPrint(
        '游냍 [WRAPPER] Construtor chamado - key: $key, odometro: $odometro');
  }

  @override
  OdometroCadastroWrapperWidgetState createState() =>
      OdometroCadastroWrapperWidgetState();
}

/// State que agora apenas acessa o controller via Get.find
///
/// O controller 칠 gerenciado automaticamente pelo binding, eliminando
/// a necessidade de cleanup manual e prevenindo vazamentos de mem칩ria
class OdometroCadastroWrapperWidgetState
    extends State<OdometroCadastroWrapperWidget> {
  late OdometroCadastroFormController _controller;

  @override
  void initState() {
    super.initState();
    debugPrint('游냍 [WIDGET] initState - IN칈CIO');

    // Acessa o controller j치 registrado via binding
    debugPrint('游냍 [WIDGET] Procurando controller...');
    try {
      _controller = Get.find<OdometroCadastroFormController>();
      debugPrint('游냍 [WIDGET] Controller encontrado: ${_controller.hashCode}');
    } catch (e) {
      debugPrint('游냍 [WIDGET] ERRO ao encontrar controller: $e');
      rethrow;
    }

    // Configure UI callbacks to separate concerns
    _controller.onShowError = (title, message) {
      debugPrint('游냍 [WIDGET] onShowError chamado: $title - $message');
      OdometroUIHelper.showErrorDialog(title, message);
    };

    // Inicializa o formul치rio com os dados do od칪metro
    debugPrint('游냍 [WIDGET] Agendando inicializa칞칚o do formul치rio...');
    debugPrint('游냍 [WIDGET] Od칪metro para edi칞칚o: ${widget.odometro}');
    WidgetsBinding.instance.addPostFrameCallback((_) {
      debugPrint('游냍 [WIDGET] PostFrameCallback executando initializeForm...');
      _controller.initializeForm(widget.odometro);
    });

    debugPrint('游냍 [WIDGET] initState - FIM');
  }

  /// Submete o formul치rio delegando para o controller
  ///
  /// O controller agora gerencia seu pr칩prio estado de loading
  /// eliminando a necessidade de estado local no widget
  Future<void> submit({VoidCallback? onSuccess}) async {
    debugPrint('游냍 [WIDGET] submit() chamado - IN칈CIO');
    debugPrint('游냍 [WIDGET] onSuccess fornecido: ${onSuccess != null}');
    debugPrint('游냍 [WIDGET] Widget mounted: $mounted');
    debugPrint(
        '游냍 [WIDGET] Controller isLoading: ${_controller.isLoading.value}');

    try {
      debugPrint('游냍 [WIDGET] Chamando _controller.submitForm...');
      final result = await _controller.submitForm(
        onSuccess: () {
          debugPrint('游냍 [WIDGET] onSuccess callback chamado!');
          onSuccess?.call();
          if (mounted) {
            debugPrint('游냍 [WIDGET] Fechando dialog com resultado true');
            Navigator.of(context).pop(true);
          } else {
            debugPrint(
                '游냍 [WIDGET] Widget n칚o est치 mounted, n칚o fechando dialog');
          }
        },
      );
      debugPrint('游냍 [WIDGET] Resultado do submitForm: $result');
    } catch (e, stackTrace) {
      debugPrint('游냍 [WIDGET] ERRO em submit: $e');
      debugPrint('游냍 [WIDGET] Stack trace: $stackTrace');
    }

    debugPrint('游냍 [WIDGET] submit() - FIM');
  }

  /// Obt칠m o estado de loading diretamente do controller
  bool get isLoading => _controller.isLoading.value;

  @override
  void dispose() {
    // Limpa o formul치rio ao fechar/cancelar o di치logo
    _controller.resetForm();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return const OdometroCadastroFormView();
  }
}
