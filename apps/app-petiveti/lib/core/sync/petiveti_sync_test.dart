import 'package:flutter/foundation.dart';
import 'package:core/core.dart';
import '../../features/animals/domain/entities/sync/animal_sync_entity.dart';
import '../../features/animals/domain/entities/animal_enums.dart';
import '../../features/medications/domain/entities/sync/medication_sync_entity.dart';
import '../../features/medications/domain/entities/medication.dart';
import 'petiveti_sync_manager.dart';

/// Classe de teste para verificar a integra√ß√£o do sync do Petiveti
/// Remove features multi-user e testa funcionalidade single-user
class PetivetiSyncTest {
  static Future<void> runTests() async {
    if (kDebugMode) {
      print('üß™ Iniciando testes de sincroniza√ß√£o Petiveti (Single-User)...');

      try {
        await _testInitialization();
        await _testAnimalOperations();
        await _testMedicationOperations();
        await _testEmergencySync();
        await _testSyncStatus();

        print('‚úÖ Todos os testes passaram!');
      } catch (e) {
        print('‚ùå Teste falhou: $e');
      }
    }
  }

  /// Teste de inicializa√ß√£o
  static Future<void> _testInitialization() async {
    print('üîß Testando inicializa√ß√£o...');

    final result = await PetivetiSyncManager.instance.initialize(
      mode: PetivetiSyncMode.development,
    );

    if (result.isLeft()) {
      throw Exception('Falha na inicializa√ß√£o: ${result.fold((f) => f.message, (_) => '')}');
    }

    print('‚úÖ Inicializa√ß√£o bem-sucedida');
  }

  /// Teste de opera√ß√µes com animais
  static Future<void> _testAnimalOperations() async {
    print('üêï Testando opera√ß√µes com animais...');

    // Criar animal de teste (single-user)
    final testAnimal = AnimalSyncEntity(
      id: 'test_animal_001',
      name: 'Buddy',
      species: AnimalSpecies.dog,
      gender: AnimalGender.male,
      birthDate: DateTime(2020, 5, 15),
      weight: 25.5,
      userId: 'test_user_001', // Single user
      moduleName: 'petiveti',
      emergencyContact: '+55 11 99999-9999',
      veterinarianId: 'vet_001',
      allergies: ['gl√∫ten', 'frango'],
      isDirty: true,
    );

    // Criar animal
    final createResult = await PetivetiSyncManager.instance.createAnimal(testAnimal);
    if (createResult.isLeft()) {
      throw Exception('Falha ao criar animal: ${createResult.fold((f) => f.message, (_) => '')}');
    }

    // Buscar animal
    final getResult = await PetivetiSyncManager.instance.getAnimal('test_animal_001');
    if (getResult.isLeft()) {
      throw Exception('Falha ao buscar animal: ${getResult.fold((f) => f.message, (_) => '')}');
    }

    final retrievedAnimal = getResult.fold((_) => null, (animal) => animal);
    if (retrievedAnimal == null) {
      throw Exception('Animal n√£o encontrado ap√≥s cria√ß√£o');
    }

    // Verificar que dados de emerg√™ncia est√£o preservados
    if (!retrievedAnimal.hasEmergencyData) {
      throw Exception('Dados de emerg√™ncia n√£o foram preservados');
    }

    print('‚úÖ Opera√ß√µes com animais (single-user) funcionando');
  }

  /// Teste de opera√ß√µes com medica√ß√µes
  static Future<void> _testMedicationOperations() async {
    print('üíä Testando opera√ß√µes com medica√ß√µes...');

    // Criar medica√ß√£o cr√≠tica para teste de emerg√™ncia
    final criticalMedication = MedicationSyncEntity(
      id: 'test_med_001',
      animalId: 'test_animal_001',
      name: 'Insulina',
      dosage: '5 unidades',
      frequency: '2x ao dia',
      startDate: DateTime.now().subtract(const Duration(days: 1)),
      endDate: DateTime.now().add(const Duration(days: 30)),
      type: MedicationType.treatment,
      isCritical: true, // Medica√ß√£o cr√≠tica para emerg√™ncia
      requiresSupervision: true,
      emergencyInstructions: 'Em caso de hipoglicemia, administrar imediatamente',
      userId: 'test_user_001', // Single user
      moduleName: 'petiveti',
      isDirty: true,
    );

    // Criar medica√ß√£o
    final createResult = await PetivetiSyncManager.instance.createMedication(criticalMedication);
    if (createResult.isLeft()) {
      throw Exception('Falha ao criar medica√ß√£o: ${createResult.fold((f) => f.message, (_) => '')}');
    }

    // Buscar medica√ß√µes do animal
    final medicationsResult = await PetivetiSyncManager.instance
        .getMedicationsForAnimal('test_animal_001');
    if (medicationsResult.isLeft()) {
      throw Exception('Falha ao buscar medica√ß√µes: ${medicationsResult.fold((f) => f.message, (_) => '')}');
    }

    final medications = medicationsResult.fold((_) => <MedicationSyncEntity>[], (meds) => meds);
    if (medications.isEmpty) {
      throw Exception('Nenhuma medica√ß√£o encontrada ap√≥s cria√ß√£o');
    }

    final retrievedMedication = medications.first;
    if (!retrievedMedication.requiresEmergencySync) {
      throw Exception('Medica√ß√£o cr√≠tica n√£o foi marcada para sync de emerg√™ncia');
    }

    print('‚úÖ Opera√ß√µes com medica√ß√µes cr√≠ticas funcionando');
  }

  /// Teste de sincroniza√ß√£o de emerg√™ncia
  static Future<void> _testEmergencySync() async {
    print('üö® Testando sincroniza√ß√£o de emerg√™ncia...');

    // Tentar sincroniza√ß√£o de emerg√™ncia
    final emergencyResult = await PetivetiSyncManager.instance.forceEmergencySync();
    if (emergencyResult.isLeft()) {
      print('‚ö†Ô∏è Sync de emerg√™ncia falhou (pode ser esperado em testes): ${emergencyResult.fold((f) => f.message, (_) => '')}');
    } else {
      print('‚úÖ Sync de emerg√™ncia executado com sucesso');
    }
  }

  /// Teste de status de sincroniza√ß√£o
  static Future<void> _testSyncStatus() async {
    print('üìä Testando status de sincroniza√ß√£o...');

    final currentStatus = PetivetiSyncManager.instance.currentStatus;
    print('Status atual: ${currentStatus.name}');

    // Testar stream de status
    final statusStream = PetivetiSyncManager.instance.syncStatusStream;
    final subscription = statusStream.listen((status) {
      print('Status atualizado via stream: ${status.name}');
    });

    // Aguardar um pouco para verificar stream
    await Future.delayed(const Duration(seconds: 1));
    await subscription.cancel();

    print('‚úÖ Status de sincroniza√ß√£o funcionando');
  }

  /// Teste de informa√ß√µes de debug
  static void printDebugInfo() {
    if (kDebugMode) {
      print('üîç Informa√ß√µes de Debug do Sync:');
      final debugInfo = PetivetiSyncManager.instance.getDebugInfo();
      debugInfo.forEach((key, value) {
        print('  $key: $value');
      });
    }
  }

  /// Limpa dados de teste
  static Future<void> cleanup() async {
    if (kDebugMode) {
      print('üßπ Limpando dados de teste...');

      try {
        await PetivetiSyncManager.instance.deleteAnimal('test_animal_001');
        await PetivetiSyncManager.instance.deleteMedication('test_med_001');
        print('‚úÖ Cleanup conclu√≠do');
      } catch (e) {
        print('‚ö†Ô∏è Erro durante cleanup: $e');
      }
    }
  }
}

/// Extens√£o para facilitar testes
extension PetivetiSyncTestExtensions on AnimalSyncEntity {
  /// Verifica se o animal tem todos os dados necess√°rios para single-user
  bool get isValidForSingleUser {
    return userId != null &&
           userId!.isNotEmpty &&
           name.isNotEmpty &&
           !name.contains('family') && // N√£o deve ter refer√™ncias a fam√≠lia
           !name.contains('shared'); // N√£o deve ter refer√™ncias a compartilhamento
  }
}

extension MedicationSyncTestExtensions on MedicationSyncEntity {
  /// Verifica se a medica√ß√£o est√° configurada corretamente para single-user
  bool get isValidForSingleUser {
    return userId != null &&
           userId!.isNotEmpty &&
           animalId.isNotEmpty;
  }
}