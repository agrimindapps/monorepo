// Flutter imports:
import 'package:flutter/material.dart';

// Package imports:
import 'package:get/get.dart';
import 'package:url_launcher/url_launcher.dart';

// Project imports:
import '../../../../core/services/feedback_service.dart';
import '../../../core/extensions/theme_extensions.dart';
import '../../../pages/premium_page/index.dart';

/// Service especializado para navega√ß√£o e abertura de URLs
/// Centraliza toda l√≥gica de navega√ß√£o, valida√ß√£o de URLs e tratamento de erros
class NavigationService {
  // Singleton pattern
  static NavigationService? _instance;
  static NavigationService get instance => _instance ??= NavigationService._();
  NavigationService._();

  // URLs conhecidas e confi√°veis
  static const String _termosUrl = 'https://plantis.agrimind.com.br/termos-uso';
  static const String _politicasUrl =
      'https://plantis.agrimind.com.br/politica-privacidade';

  // ========== NAVEGA√á√ÉO PARA URLs EXTERNAS ==========

  /// Navega para p√°gina de Termos de Uso com valida√ß√£o e tratamento de erro
  Future<NavigationResult> navigateToTermos() async {
    return await _openExternalUrl(
      url: _termosUrl,
      errorTitle: 'Erro',
      errorMessage: 'N√£o foi poss√≠vel abrir o link dos Termos de Uso',
      successMessage: 'Abrindo Termos de Uso...',
    );
  }

  /// Navega para p√°gina de Pol√≠tica de Privacidade com valida√ß√£o e tratamento de erro
  Future<NavigationResult> navigateToPoliticas() async {
    return await _openExternalUrl(
      url: _politicasUrl,
      errorTitle: 'Erro',
      errorMessage: 'N√£o foi poss√≠vel abrir o link da Pol√≠tica de Privacidade',
      successMessage: 'Abrindo Pol√≠tica de Privacidade...',
    );
  }

  /// Abre URL externa gen√©rica com valida√ß√£o completa
  Future<NavigationResult> openExternalUrl(String url) async {
    return await _openExternalUrl(
      url: url,
      errorTitle: 'Erro',
      errorMessage: 'N√£o foi poss√≠vel abrir o link: $url',
      successMessage: 'Abrindo link externo...',
    );
  }

  // ========== NAVEGA√á√ÉO INTERNA ==========

  /// Navega para p√°gina Premium com transi√ß√£o animada
  NavigationResult navigateToPromo() {
    try {
      debugPrint('üéØ NavigationService: Navegando para p√°gina Premium');

      Get.to(
        () => const PremiumView(),
        binding: PremiumBinding(),
        transition: Transition.rightToLeft,
        duration: const Duration(milliseconds: 300),
      );

      return NavigationResult(
        success: true,
        type: NavigationType.internal,
        message: 'Navegando para p√°gina Premium',
      );
    } catch (e) {
      debugPrint('‚ùå NavigationService: Erro ao navegar para Premium: $e');
      return NavigationResult(
        success: false,
        type: NavigationType.internal,
        error: e.toString(),
        message: 'Erro ao navegar para p√°gina Premium',
      );
    }
  }

  /// Mostra di√°logo "Sobre o App" com informa√ß√µes da aplica√ß√£o
  NavigationResult showAboutDialog() {
    try {
      debugPrint('‚ÑπÔ∏è NavigationService: Mostrando di√°logo Sobre');

      Get.dialog(
        AlertDialog(
          title: const Text('Sobre o App Plantas'),
          content: const SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'App Plantas',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                SizedBox(height: 8),
                Text('Vers√£o: 1.0.0'),
                SizedBox(height: 16),
                Text(
                  'O App Plantas foi desenvolvido para ajudar voc√™ a cuidar melhor das suas plantas, criando um jardim dom√©stico saud√°vel e organizado.',
                ),
                SizedBox(height: 16),
                Text(
                  'Funcionalidades:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                SizedBox(height: 8),
                Text('‚Ä¢ Cadastro e organiza√ß√£o de plantas por espa√ßos'),
                Text('‚Ä¢ Configura√ß√£o autom√°tica de cuidados'),
                Text('‚Ä¢ Lembretes de rega, aduba√ß√£o e outros cuidados'),
                Text('‚Ä¢ Hist√≥rico e coment√°rios sobre suas plantas'),
                Text('‚Ä¢ Backup e sincroniza√ß√£o de dados'),
                SizedBox(height: 16),
                Text(
                  'Desenvolvido por Agrimind Solu√ß√µes',
                  style: TextStyle(
                    fontStyle: FontStyle.italic,
                    color: Colors.grey,
                  ),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Get.back(),
              child: const Text('Fechar'),
            ),
          ],
        ),
      );

      return NavigationResult(
        success: true,
        type: NavigationType.dialog,
        message: 'Di√°logo Sobre exibido',
      );
    } catch (e) {
      debugPrint('‚ùå NavigationService: Erro ao mostrar di√°logo Sobre: $e');
      return NavigationResult(
        success: false,
        type: NavigationType.dialog,
        error: e.toString(),
        message: 'Erro ao exibir informa√ß√µes do app',
      );
    }
  }

  /// Mostra formul√°rio de feedback usando FeedbackService
  NavigationResult showFeedback() {
    try {
      final context = Get.context;
      if (context == null) {
        return NavigationResult(
          success: false,
          type: NavigationType.service,
          error: 'Context n√£o dispon√≠vel',
          message: 'N√£o foi poss√≠vel abrir o formul√°rio de feedback',
        );
      }

      debugPrint('üí¨ NavigationService: Abrindo formul√°rio de feedback');

      final feedbackService = FeedbackService();
      feedbackService.showFeedbackDialog(context);

      return NavigationResult(
        success: true,
        type: NavigationType.service,
        message: 'Formul√°rio de feedback aberto',
      );
    } catch (e) {
      debugPrint('‚ùå NavigationService: Erro ao abrir feedback: $e');
      return NavigationResult(
        success: false,
        type: NavigationType.service,
        error: e.toString(),
        message: 'Erro ao abrir formul√°rio de feedback',
      );
    }
  }

  // ========== NAVEGA√á√ÉO PLACEHOLDER (PARA FUTURAS IMPLEMENTA√á√ïES) ==========

  /// Placeholder para navega√ß√£o de notifica√ß√µes
  NavigationResult navigateToNotifications() {
    debugPrint(
        'üîî NavigationService: Navega√ß√£o para notifica√ß√µes n√£o implementada');
    _showPlaceholderMessage('Notifica√ß√µes',
        'Em breve voc√™ poder√° gerenciar suas notifica√ß√µes aqui!');

    return NavigationResult(
      success: true,
      type: NavigationType.placeholder,
      message: 'Navega√ß√£o para notifica√ß√µes (placeholder)',
    );
  }

  /// Placeholder para navega√ß√£o App Store
  NavigationResult navigateToAppStore() {
    debugPrint(
        'üè™ NavigationService: Navega√ß√£o para App Store n√£o implementada');
    _showPlaceholderMessage(
        'Avaliar App', 'Em breve voc√™ poder√° avaliar o app na loja!');

    return NavigationResult(
      success: true,
      type: NavigationType.placeholder,
      message: 'Navega√ß√£o para App Store (placeholder)',
    );
  }

  /// Placeholder para compartilhamento do app
  NavigationResult shareApp() {
    debugPrint('üì§ NavigationService: Compartilhamento n√£o implementado');
    _showPlaceholderMessage('Compartilhar App',
        'Em breve voc√™ poder√° compartilhar o app com amigos!');

    return NavigationResult(
      success: true,
      type: NavigationType.placeholder,
      message: 'Compartilhamento do app (placeholder)',
    );
  }

  // ========== M√âTODOS PRIVADOS ==========

  /// Abre URL externa com valida√ß√£o completa e tratamento de erro
  Future<NavigationResult> _openExternalUrl({
    required String url,
    required String errorTitle,
    required String errorMessage,
    required String successMessage,
  }) async {
    try {
      debugPrint('üåê NavigationService: Abrindo URL externa: $url');

      final Uri uri = Uri.parse(url);

      // Validar se a URL pode ser aberta
      if (await canLaunchUrl(uri)) {
        await launchUrl(uri, mode: LaunchMode.externalApplication);

        debugPrint('‚úÖ NavigationService: URL aberta com sucesso');
        return NavigationResult(
          success: true,
          type: NavigationType.external,
          url: url,
          message: successMessage,
        );
      } else {
        debugPrint('‚ùå NavigationService: N√£o foi poss√≠vel abrir URL: $url');
        _showError(errorTitle, errorMessage);

        return NavigationResult(
          success: false,
          type: NavigationType.external,
          url: url,
          error: 'URL n√£o pode ser aberta',
          message: errorMessage,
        );
      }
    } catch (e) {
      debugPrint('‚ùå NavigationService: Erro ao abrir URL $url: $e');
      _showError(errorTitle, 'Erro ao abrir $url: $e');

      return NavigationResult(
        success: false,
        type: NavigationType.external,
        url: url,
        error: e.toString(),
        message: 'Erro ao abrir $url: $e',
      );
    }
  }

  /// Mostra mensagem de erro padronizada
  void _showError(String title, String message) {
    final context = Get.context;
    if (context != null) {
      PlantasGetSnackbar.error(context, title, message);
    }
  }

  /// Mostra mensagem para funcionalidades placeholder
  void _showPlaceholderMessage(String title, String message) {
    final context = Get.context;
    if (context != null) {
      PlantasGetSnackbar.info(context, title, message);
    }
  }
}

// ========== CLASSES DE DADOS ==========

/// Tipos de navega√ß√£o dispon√≠veis
enum NavigationType {
  external, // URLs externas
  internal, // Navega√ß√£o dentro do app
  dialog, // Di√°logos modais
  service, // Servi√ßos externos
  placeholder // Funcionalidades ainda n√£o implementadas
}

/// Resultado de opera√ß√µes de navega√ß√£o
class NavigationResult {
  final bool success;
  final NavigationType type;
  final String? url;
  final String message;
  final String? error;

  NavigationResult({
    required this.success,
    required this.type,
    this.url,
    required this.message,
    this.error,
  });

  bool get isExternal => type == NavigationType.external;
  bool get isInternal => type == NavigationType.internal;
  bool get isDialog => type == NavigationType.dialog;
  bool get isPlaceholder => type == NavigationType.placeholder;
}
