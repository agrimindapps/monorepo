import 'package:flutter/foundation.dart';

import '../../../features/auth/presentation/state/auth_state.dart';
import '../../services/platform_service.dart';

/// Guard de rotas centralizado para gerenciar redirecionamentos baseados em autentica√ß√£o
///
/// Esta classe extrai a l√≥gica complexa de redirecionamento do router principal,
/// melhorando legibilidade, testabilidade e manutenibilidade.
class RouteGuard {

  const RouteGuard(this._authState, this._platformService);
  final AuthState? _authState;
  final PlatformService _platformService;

  /// Determina se deve redirecionar baseado no estado atual da rota e autentica√ß√£o
  ///
  /// Retorna null se a navega√ß√£o deve continuar, ou uma string com a rota de destino
  /// se deve redirecionar.
  String? handleRedirect(String currentLocation) {
    if (_authState == null || !_authState.isInitialized) {
      return null;
    }

    final isAuthenticated = _authState.isAuthenticated;
    final hasAuthError = _authState.errorMessage != null;
    final isLoading = _authState.isLoading;
    final routeType = _getRouteType(currentLocation);
    if (hasAuthError && currentLocation == '/login') {
      if (kDebugMode) {
        debugPrint('üõ°Ô∏è RouteGuard: Erro de auth detectado em /login - mantendo usu√°rio na p√°gina');
      }
      return null;
    }
    if (isLoading && currentLocation == '/login') {
      if (kDebugMode) {
        debugPrint('üõ°Ô∏è RouteGuard: Login em progresso em /login - mantendo usu√°rio na p√°gina');
      }
      return null;
    }
    switch (routeType) {
      case RouteType.authProtected:
        return _handleAuthProtectedRoute(isAuthenticated, currentLocation);
      
      case RouteType.publicOnly:
        return _handlePublicOnlyRoute(isAuthenticated);
      
      case RouteType.alwaysPublic:
        return null; // Sempre permitir acesso
      
      case RouteType.appContent:
        return _handleAppContentRoute(isAuthenticated, currentLocation);
    }
  }

  /// Determina a localiza√ß√£o inicial baseada no estado de autentica√ß√£o e plataforma
  String getInitialLocation() {
    return '/';
  }

  /// Classifica o tipo de rota baseado no path
  RouteType _getRouteType(String location) {
    const publicRoutes = [
      '/privacy',
      '/terms', 
      '/about',
      '/contact',
      '/help',
      '/faq',
      '/support',
    ];
    const authOnlyRoutes = ['/promo', '/login'];
    const appRoutes = ['/', '/odometer', '/fuel', '/maintenance', '/reports', '/settings', '/profile'];

    if (publicRoutes.any((route) => location.startsWith(route))) {
      return RouteType.alwaysPublic;
    }
    
    if (authOnlyRoutes.any((route) => location.startsWith(route))) {
      return RouteType.publicOnly;
    }
    
    if (appRoutes.any((route) => location == route || location.startsWith('$route/'))) {
      return RouteType.appContent;
    }
    
    return RouteType.authProtected;
  }

  /// Handle de rotas que requerem autentica√ß√£o
  String? _handleAuthProtectedRoute(bool isAuthenticated, String location) {
    if (!isAuthenticated) {
      return _platformService.isWeb ? '/promo' : '/login';
    }
    return null;
  }

  /// Handle de rotas que s√£o apenas para usu√°rios n√£o autenticados
  String? _handlePublicOnlyRoute(bool isAuthenticated) {
    if (isAuthenticated) {
      return '/';
    }
    return null;
  }

  /// Handle de rotas de conte√∫do da aplica√ß√£o
  String? _handleAppContentRoute(bool isAuthenticated, String location) {
    if (_platformService.isWeb) {
      if (isAuthenticated) {
        return null;
      }
      return '/promo';
    }
    if (_platformService.isMobile) {
      return null; // Sempre permitir acesso no mobile
    }
    if (!isAuthenticated) {
      return '/login';
    }
    
    return null;
  }
}

/// Tipos de rota para classifica√ß√£o de acesso
enum RouteType {
  /// Rotas que sempre s√£o p√∫blicas (termos, privacidade)
  alwaysPublic,
  
  /// Rotas apenas para usu√°rios n√£o autenticados (promo, login)
  publicOnly,
  
  /// Rotas que requerem autentica√ß√£o
  authProtected,
  
  /// Conte√∫do principal da aplica√ß√£o
  appContent,
}
