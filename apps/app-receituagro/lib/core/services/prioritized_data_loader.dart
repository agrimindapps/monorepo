import 'dart:developer' as developer;

import 'culturas_data_loader.dart';
import 'diagnosticos_data_loader.dart';
import 'fitossanitarios_data_loader.dart';
import 'pragas_data_loader.dart';

/// Servi√ßo de carregamento priorizado de dados
///
/// Carrega dados em duas fases:
/// - **Fase 1 (Priorit√°ria)**: Culturas, Pragas e Fitossanit√°rios - aguarda antes do app iniciar
/// - **Fase 2 (Background)**: Diagn√≥sticos - carrega em background sem bloquear o app
class PrioritizedDataLoader {
  // Construtor privado para evitar instancia√ß√£o (utility class)
  PrioritizedDataLoader._();

  static bool _isPriorityDataLoaded = false;
  static bool _isBackgroundDataLoaded = false;

  /// Carrega dados priorit√°rios (Culturas, Pragas, Fitossanit√°rios)
  /// Estes dados s√£o essenciais para navega√ß√£o b√°sica do app
  static Future<void> loadPriorityData() async {
    if (_isPriorityDataLoaded) {
      developer.log(
        '‚úÖ Dados priorit√°rios j√° carregados, pulando...',
        name: 'PrioritizedDataLoader',
      );
      return;
    }

    try {
      developer.log(
        'üöÄ [PRIORITY] Iniciando carregamento de dados priorit√°rios...',
        name: 'PrioritizedDataLoader',
      );

      final startTime = DateTime.now();

      // Carrega dados priorit√°rios em paralelo
      await Future.wait([
        CulturasDataLoader.loadCulturasData(),
        PragasDataLoader.loadPragasData(),
        FitossanitariosDataLoader.loadFitossanitariosData(),
      ]);

      final duration = DateTime.now().difference(startTime);

      _isPriorityDataLoaded = true;

      developer.log(
        '‚úÖ [PRIORITY] Dados priorit√°rios carregados em ${duration.inMilliseconds}ms',
        name: 'PrioritizedDataLoader',
      );

      // Log estat√≠sticas
      await _logPriorityDataStats();
    } catch (e, stackTrace) {
      developer.log(
        '‚ùå [PRIORITY] Erro ao carregar dados priorit√°rios: $e',
        name: 'PrioritizedDataLoader',
        error: e,
        stackTrace: stackTrace,
      );
      rethrow;
    }
  }

  /// Carrega dados em background (Diagn√≥sticos)
  /// Estes dados n√£o bloqueiam a inicializa√ß√£o do app
  ///
  /// IMPORTANTE: Este m√©todo retorna imediatamente e continua carregando em background
  static void loadBackgroundData() {
    if (_isBackgroundDataLoaded) {
      developer.log(
        '‚úÖ Dados em background j√° carregados, pulando...',
        name: 'PrioritizedDataLoader',
      );
      return;
    }

    developer.log(
      '‚è≥ [BACKGROUND] Iniciando carregamento de dados em background...',
      name: 'PrioritizedDataLoader',
    );

    // Carrega em background sem bloquear
    _loadBackgroundDataAsync();
  }

  /// M√©todo privado que executa o carregamento em background
  static Future<void> _loadBackgroundDataAsync() async {
    try {
      final startTime = DateTime.now();

      developer.log(
        'ü©∫ [BACKGROUND] Carregando diagn√≥sticos...',
        name: 'PrioritizedDataLoader',
      );

      await DiagnosticosDataLoader.loadDiagnosticosData();

      final duration = DateTime.now().difference(startTime);

      _isBackgroundDataLoaded = true;

      developer.log(
        '‚úÖ [BACKGROUND] Diagn√≥sticos carregados em ${duration.inMilliseconds}ms',
        name: 'PrioritizedDataLoader',
      );

      // Log estat√≠sticas
      await _logBackgroundDataStats();
    } catch (e, stackTrace) {
      developer.log(
        '‚ùå [BACKGROUND] Erro ao carregar dados em background: $e',
        name: 'PrioritizedDataLoader',
        error: e,
        stackTrace: stackTrace,
      );
      // N√£o propaga o erro - background loading n√£o deve crashar o app
    }
  }

  /// For√ßa recarregamento de todos os dados
  static Future<void> forceReloadAll() async {
    developer.log(
      'üîÑ For√ßando recarregamento de todos os dados...',
      name: 'PrioritizedDataLoader',
    );

    _isPriorityDataLoaded = false;
    _isBackgroundDataLoaded = false;

    await loadPriorityData();
    await _loadBackgroundDataAsync();

    developer.log(
      '‚úÖ Recarregamento completo conclu√≠do!',
      name: 'PrioritizedDataLoader',
    );
  }

  /// Verifica se dados priorit√°rios est√£o carregados
  static Future<bool> isPriorityDataReady() async {
    try {
      final culturasLoaded = await CulturasDataLoader.isDataLoaded();
      final pragasLoaded = await PragasDataLoader.isDataLoaded();
      final fitossanitariosLoaded =
          await FitossanitariosDataLoader.isDataLoaded();

      return culturasLoaded && pragasLoaded && fitossanitariosLoaded;
    } catch (e) {
      developer.log(
        '‚ùå Erro ao verificar dados priorit√°rios: $e',
        name: 'PrioritizedDataLoader',
      );
      return false;
    }
  }

  /// Verifica se dados em background est√£o carregados
  static Future<bool> isBackgroundDataReady() async {
    try {
      return await DiagnosticosDataLoader.isDataLoaded();
    } catch (e) {
      developer.log(
        '‚ùå Erro ao verificar dados em background: $e',
        name: 'PrioritizedDataLoader',
      );
      return false;
    }
  }

  /// Obt√©m estat√≠sticas completas de carregamento
  static Future<Map<String, dynamic>> getLoadingStats() async {
    try {
      final culturasStats = await CulturasDataLoader.getStats();
      final pragasStats = await PragasDataLoader.getStats();
      final fitossanitariosStats = await FitossanitariosDataLoader.getStats();
      final diagnosticosStats = await DiagnosticosDataLoader.getStats();

      return {
        'priority_data': {
          'loaded': _isPriorityDataLoaded,
          'culturas': culturasStats,
          'pragas': pragasStats,
          'fitossanitarios': fitossanitariosStats,
        },
        'background_data': {
          'loaded': _isBackgroundDataLoaded,
          'diagnosticos': diagnosticosStats,
        },
        'timestamp': DateTime.now().toIso8601String(),
      };
    } catch (e) {
      return {
        'error': e.toString(),
        'priority_loaded': _isPriorityDataLoaded,
        'background_loaded': _isBackgroundDataLoaded,
      };
    }
  }

  /// Log estat√≠sticas dos dados priorit√°rios
  static Future<void> _logPriorityDataStats() async {
    try {
      final culturasStats = await CulturasDataLoader.getStats();
      final pragasStats = await PragasDataLoader.getStats();
      final fitossanitariosStats = await FitossanitariosDataLoader.getStats();

      final totalCulturas = culturasStats['total_culturas'] ?? 0;
      final totalPragas = pragasStats['total_pragas'] ?? 0;
      final totalFitossanitarios =
          fitossanitariosStats['total_fitossanitarios'] ?? 0;

      developer.log(
        'üìä [PRIORITY STATS] Culturas: $totalCulturas | Pragas: $totalPragas | Fitossanit√°rios: $totalFitossanitarios',
        name: 'PrioritizedDataLoader',
      );
    } catch (e) {
      developer.log(
        '‚ö†Ô∏è Erro ao obter estat√≠sticas priorit√°rias: $e',
        name: 'PrioritizedDataLoader',
      );
    }
  }

  /// Log estat√≠sticas dos dados em background
  static Future<void> _logBackgroundDataStats() async {
    try {
      final diagnosticosStats = await DiagnosticosDataLoader.getStats();
      final totalDiagnosticos = diagnosticosStats['total_diagnosticos'] ?? 0;

      developer.log(
        'üìä [BACKGROUND STATS] Diagn√≥sticos: $totalDiagnosticos',
        name: 'PrioritizedDataLoader',
      );
    } catch (e) {
      developer.log(
        '‚ö†Ô∏è Erro ao obter estat√≠sticas em background: $e',
        name: 'PrioritizedDataLoader',
      );
    }
  }

  /// Getters para status de carregamento
  static bool get isPriorityDataLoaded => _isPriorityDataLoaded;
  static bool get isBackgroundDataLoaded => _isBackgroundDataLoaded;

  /// Reset flags (√∫til para testes)
  static void reset() {
    _isPriorityDataLoaded = false;
    _isBackgroundDataLoaded = false;
  }
}
