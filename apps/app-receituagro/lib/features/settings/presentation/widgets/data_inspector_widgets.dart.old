import 'package:core/core.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

/// Widget for displaying Hive boxes tab
class HiveBoxesTab extends StatelessWidget {
  final List<String> boxes;
  final DatabaseInspectorService inspector;
  final void Function(String) onBoxTap;
  final void Function(String) onExportBox;

  const HiveBoxesTab({
    super.key,
    required this.boxes,
    required this.inspector,
    required this.onBoxTap,
    required this.onExportBox,
  });

  @override
  Widget build(BuildContext context) {
    if (boxes.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.storage_outlined, size: 64, color: Colors.grey),
            SizedBox(height: 16),
            Text(
              'Nenhuma Hive Box encontrada',
              style: TextStyle(fontSize: 16, color: Colors.grey),
            ),
            SizedBox(height: 8),
            Text(
              'As boxes aparecerão aqui quando forem criadas',
              style: TextStyle(fontSize: 12, color: Colors.grey),
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: boxes.length,
      itemBuilder: (context, index) {
        final boxKey = boxes[index];
        final displayName = inspector.getBoxDisplayName(boxKey);
        final stats = inspector.getBoxStats(boxKey);
        
        return Card(
          margin: const EdgeInsets.only(bottom: 8),
          child: ListTile(
            leading: CircleAvatar(
              backgroundColor: Theme.of(context).primaryColor,
              child: const Icon(Icons.storage, color: Colors.white),
            ),
            title: Text(
              displayName,
              style: const TextStyle(fontWeight: FontWeight.w600),
            ),
            subtitle: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Box: $boxKey'),
                Text('Registros: ${stats['totalRecords'] ?? 0}'),
                if (stats['isOpen'] == false)
                  const Text(
                    'Box fechada',
                    style: TextStyle(color: Colors.orange),
                  ),
              ],
            ),
            trailing: PopupMenuButton<String>(
              onSelected: (value) {
                switch (value) {
                  case 'view':
                    onBoxTap(boxKey);
                    break;
                  case 'export':
                    onExportBox(boxKey);
                    break;
                }
              },
              itemBuilder: (context) => [
                const PopupMenuItem(
                  value: 'view',
                  child: Row(
                    children: [
                      Icon(Icons.visibility),
                      SizedBox(width: 8),
                      Text('Visualizar'),
                    ],
                  ),
                ),
                const PopupMenuItem(
                  value: 'export',
                  child: Row(
                    children: [
                      Icon(Icons.download),
                      SizedBox(width: 8),
                      Text('Exportar'),
                    ],
                  ),
                ),
              ],
            ),
            onTap: () => onBoxTap(boxKey),
          ),
        );
      },
    );
  }
}

/// Widget for displaying SharedPreferences tab
class SharedPreferencesTab extends StatefulWidget {
  final DatabaseInspectorService inspector;
  final VoidCallback onExport;
  final void Function(String) onRemoveKey;

  const SharedPreferencesTab({
    super.key,
    required this.inspector,
    required this.onExport,
    required this.onRemoveKey,
  });

  @override
  State<SharedPreferencesTab> createState() => _SharedPreferencesTabState();
}

class _SharedPreferencesTabState extends State<SharedPreferencesTab> {
  List<SharedPreferencesRecord>? _records;
  bool _isLoading = true;
  String? _error;
  String _searchQuery = '';

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  Future<void> _loadData() async {
    try {
      setState(() {
        _isLoading = true;
        _error = null;
      });

      final records = await widget.inspector.loadSharedPreferencesData();
      
      setState(() {
        _records = records;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _error = e.toString();
        _isLoading = false;
      });
    }
  }

  List<SharedPreferencesRecord> get _filteredRecords {
    if (_records == null || _searchQuery.isEmpty) return _records ?? [];
    
    return _records!.where((record) => 
      record.key.toLowerCase().contains(_searchQuery.toLowerCase()) ||
      record.value.toString().toLowerCase().contains(_searchQuery.toLowerCase())
    ).toList();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        // Header with search and export
        Container(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              Row(
                children: [
                  Expanded(
                    child: TextField(
                      decoration: const InputDecoration(
                        hintText: 'Pesquisar chaves...',
                        prefixIcon: Icon(Icons.search),
                        border: OutlineInputBorder(),
                        contentPadding: EdgeInsets.symmetric(
                          horizontal: 16,
                          vertical: 8,
                        ),
                      ),
                      onChanged: (value) {
                        setState(() {
                          _searchQuery = value;
                        });
                      },
                    ),
                  ),
                  const SizedBox(width: 8),
                  ElevatedButton.icon(
                    onPressed: widget.onExport,
                    icon: const Icon(Icons.download),
                    label: const Text('Exportar'),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              if (_records != null)
                Text(
                  '${_filteredRecords.length} de ${_records!.length} chaves',
                  style: Theme.of(context).textTheme.bodySmall,
                ),
            ],
          ),
        ),
        
        // Content
        Expanded(
          child: _buildContent(),
        ),
      ],
    );
  }

  Widget _buildContent() {
    if (_isLoading) {
      return const Center(
        child: CircularProgressIndicator(),
      );
    }

    if (_error != null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.error_outline,
              size: 64,
              color: Theme.of(context).colorScheme.error,
            ),
            const SizedBox(height: 16),
            Text('Erro ao carregar SharedPreferences'),
            const SizedBox(height: 8),
            Text(_error!, style: const TextStyle(fontSize: 12)),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _loadData,
              child: const Text('Tentar Novamente'),
            ),
          ],
        ),
      );
    }

    final records = _filteredRecords;

    if (records.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.settings_outlined, size: 64, color: Colors.grey),
            const SizedBox(height: 16),
            Text(
              _searchQuery.isEmpty
                  ? 'Nenhum dado no SharedPreferences'
                  : 'Nenhum resultado encontrado',
              style: const TextStyle(fontSize: 16, color: Colors.grey),
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      itemCount: records.length,
      itemBuilder: (context, index) {
        final record = records[index];
        return SharedPreferencesCard(
          record: record,
          onRemove: () => widget.onRemoveKey(record.key),
        );
      },
    );
  }
}

/// Widget for displaying statistics tab
class StatisticsTab extends StatelessWidget {
  final Map<String, dynamic> stats;
  final DatabaseInspectorService inspector;

  const StatisticsTab({
    super.key,
    required this.stats,
    required this.inspector,
  });

  @override
  Widget build(BuildContext context) {
    return ListView(
      padding: const EdgeInsets.all(16),
      children: [
        _buildStatCard(
          context,
          'Hive Boxes',
          '${stats['totalHiveBoxes'] ?? 0}',
          Icons.storage,
          Colors.blue,
        ),
        const SizedBox(height: 8),
        _buildStatCard(
          context,
          'Total de Registros',
          '${stats['totalHiveRecords'] ?? 0}',
          Icons.data_object,
          Colors.green,
        ),
        const SizedBox(height: 8),
        _buildStatCard(
          context,
          'Boxes Registradas',
          '${stats['customBoxesRegistered'] ?? 0}',
          Icons.app_registration,
          Colors.orange,
        ),
        const SizedBox(height: 16),
        
        if (stats['availableBoxes'] != null) ...[
          const Text(
            'Boxes Disponíveis',
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
          ),
          const SizedBox(height: 8),
          ...((stats['availableBoxes'] as List<dynamic>?) ?? []).map(
            (boxKey) => Card(
              margin: const EdgeInsets.only(bottom: 4),
              child: ListTile(
                leading: const Icon(Icons.storage, color: Colors.blue),
                title: Text(inspector.getBoxDisplayName(boxKey.toString())),
                subtitle: Text('Box: $boxKey'),
                trailing: Text('${inspector.getBoxStats(boxKey.toString())['totalRecords'] ?? 0} registros'),
              ),
            ),
          ),
        ],
        
        const SizedBox(height: 16),
        Text(
          'Gerado em: ${stats['generatedAt'] ?? 'N/A'}',
          style: Theme.of(context).textTheme.bodySmall?.copyWith(
            color: Colors.grey,
          ),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }

  Widget _buildStatCard(
    BuildContext context,
    String title,
    String value,
    IconData icon,
    Color color,
  ) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: color.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Icon(icon, color: color, size: 32),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                          color: Colors.grey[600],
                        ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    value,
                    style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

/// Card widget for SharedPreferences records
class SharedPreferencesCard extends StatelessWidget {
  final SharedPreferencesRecord record;
  final VoidCallback onRemove;

  const SharedPreferencesCard({
    super.key,
    required this.record,
    required this.onRemove,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.only(bottom: 8),
      child: ExpansionTile(
        leading: CircleAvatar(
          backgroundColor: _getTypeColor(record.type),
          child: Text(
            record.type[0].toUpperCase(),
            style: const TextStyle(color: Colors.white, fontSize: 12),
          ),
        ),
        title: Text(
          record.key,
          style: const TextStyle(fontWeight: FontWeight.w600),
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Tipo: ${record.type}'),
            Text('Tamanho: ${record.sizeInBytes} bytes'),
          ],
        ),
        trailing: IconButton(
          icon: const Icon(Icons.delete, color: Colors.red),
          onPressed: onRemove,
          tooltip: 'Remover chave',
        ),
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    const Text(
                      'Valor:',
                      style: TextStyle(fontWeight: FontWeight.w600),
                    ),
                    const Spacer(),
                    TextButton.icon(
                      onPressed: () => _copyToClipboard(context, record.value.toString()),
                      icon: const Icon(Icons.copy, size: 16),
                      label: const Text('Copiar'),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.grey[100],
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.grey[300]!),
                  ),
                  child: Text(
                    record.value.toString(),
                    style: const TextStyle(
                      fontFamily: 'Courier',
                      fontSize: 12,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Color _getTypeColor(String type) {
    switch (type.toLowerCase()) {
      case 'string':
        return Colors.blue;
      case 'int':
        return Colors.green;
      case 'bool':
        return Colors.orange;
      case 'double':
        return Colors.purple;
      case 'list<string>':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }

  void _copyToClipboard(BuildContext context, String text) {
    Clipboard.setData(ClipboardData(text: text));
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Valor copiado para a área de transferência'),
        duration: Duration(seconds: 2),
      ),
    );
  }
}

/// Dialog for displaying box data
class BoxDataDialog extends StatefulWidget {
  final String boxKey;
  final String displayName;
  final List<DatabaseRecord> records;
  final DatabaseInspectorService inspector;

  const BoxDataDialog({
    super.key,
    required this.boxKey,
    required this.displayName,
    required this.records,
    required this.inspector,
  });

  @override
  State<BoxDataDialog> createState() => _BoxDataDialogState();
}

class _BoxDataDialogState extends State<BoxDataDialog> {
  String _searchQuery = '';
  
  List<DatabaseRecord> get _filteredRecords {
    if (_searchQuery.isEmpty) return widget.records;
    
    return widget.records.where((record) {
      final searchLower = _searchQuery.toLowerCase();
      return record.id.toLowerCase().contains(searchLower) ||
             record.data.toString().toLowerCase().contains(searchLower);
    }).toList();
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      insetPadding: const EdgeInsets.all(16),
      child: SizedBox(
        width: double.maxFinite,
        height: MediaQuery.of(context).size.height * 0.8,
        child: Column(
          children: [
            // Header
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Theme.of(context).primaryColor,
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(12),
                  topRight: Radius.circular(12),
                ),
              ),
              child: Row(
                children: [
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          widget.displayName,
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 18,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        Text(
                          '${widget.records.length} registros',
                          style: const TextStyle(
                            color: Colors.white70,
                            fontSize: 12,
                          ),
                        ),
                      ],
                    ),
                  ),
                  IconButton(
                    onPressed: () => Navigator.of(context).pop(),
                    icon: const Icon(Icons.close, color: Colors.white),
                  ),
                ],
              ),
            ),
            
            // Search
            Padding(
              padding: const EdgeInsets.all(16),
              child: TextField(
                decoration: const InputDecoration(
                  hintText: 'Pesquisar registros...',
                  prefixIcon: Icon(Icons.search),
                  border: OutlineInputBorder(),
                ),
                onChanged: (value) {
                  setState(() {
                    _searchQuery = value;
                  });
                },
              ),
            ),
            
            // Content
            Expanded(
              child: _buildRecordsList(),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildRecordsList() {
    final records = _filteredRecords;
    
    if (records.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.data_object, size: 64, color: Colors.grey),
            const SizedBox(height: 16),
            Text(
              _searchQuery.isEmpty
                  ? 'Nenhum registro encontrado'
                  : 'Nenhum resultado para a pesquisa',
              style: const TextStyle(fontSize: 16, color: Colors.grey),
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      itemCount: records.length,
      itemBuilder: (context, index) {
        final record = records[index];
        return Card(
          margin: const EdgeInsets.only(bottom: 8),
          child: ExpansionTile(
            leading: CircleAvatar(
              backgroundColor: Theme.of(context).primaryColor,
              child: const Icon(Icons.data_object, color: Colors.white, size: 16),
            ),
            title: Text(
              'ID: ${record.id}',
              style: const TextStyle(fontWeight: FontWeight.w600, fontSize: 14),
            ),
            subtitle: Text(
              '${record.data.keys.length} campos',
              style: const TextStyle(fontSize: 12),
            ),
            children: [
              Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        const Text(
                          'Dados:',
                          style: TextStyle(fontWeight: FontWeight.w600),
                        ),
                        const Spacer(),
                        TextButton.icon(
                          onPressed: () => _copyToClipboard(
                            context,
                            widget.inspector.formatAsJsonString(record.data),
                          ),
                          icon: const Icon(Icons.copy, size: 16),
                          label: const Text('Copiar JSON'),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Container(
                      width: double.infinity,
                      constraints: const BoxConstraints(maxHeight: 200),
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.grey[100],
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(color: Colors.grey[300]!),
                      ),
                      child: SingleChildScrollView(
                        child: Text(
                          widget.inspector.formatAsJsonString(record.data),
                          style: const TextStyle(
                            fontFamily: 'Courier',
                            fontSize: 10,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  void _copyToClipboard(BuildContext context, String text) {
    Clipboard.setData(ClipboardData(text: text));
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Dados copiados para a área de transferência'),
        duration: Duration(seconds: 2),
      ),
    );
  }
}