import 'package:core/core.dart';
import 'package:flutter/foundation.dart';

import '../../../infrastructure/services/sync_service.dart';
import '../injection.dart' as local_di;

/// M√≥dulo de Dependency Injection para sincroniza√ß√£o do Taskolist
/// Integra TaskManagerSyncService existente
abstract class TaskolistSyncDIModule {
  static void init() {
    // TaskManagerSyncService j√° est√° registrado no sistema de DI principal
    // N√£o precisamos registrar novamente aqui
  }

  /// Inicializa o sync service ap√≥s o app estar pronto
  /// E conecta com o connectivity monitoring existente
  static Future<void> initializeSyncService() async {
    try {
      // TaskManagerSyncService j√° est√° inicializado no construtor
      if (kDebugMode) {
        print('‚úÖ TaskManagerSyncService initialized successfully');
      }
      _setupConnectivityMonitoring();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error initializing TaskManagerSyncService: $e');
      }
    }
  }

  /// Configura monitoramento de conectividade para auto-sync
  static void _setupConnectivityMonitoring() {
    try {
      // TaskManagerSyncService j√° tem monitoramento interno
      if (kDebugMode) {
        print(
          '‚úÖ Connectivity monitoring already integrated in TaskManagerSyncService',
        );
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ö†Ô∏è Failed to setup connectivity monitoring: $e');
      }
    }
  }

  /// Executa sync inicial ap√≥s o usu√°rio fazer login
  /// Usando o TaskManagerSyncService que j√° est√° configurado
  static Future<void> performInitialSync() async {
    try {
      final syncService = local_di.getIt<TaskManagerSyncService>();

      // TaskManagerSyncService n√£o tem hasPendingSync ou canSync
      // Vamos verificar se est√° sincronizando
      if (syncService.isSyncing) {
        if (kDebugMode) {
          print('‚ÑπÔ∏è Skipping initial sync - service is already syncing');
        }
        return;
      }

      if (kDebugMode) {
        print('üîÑ Starting initial sync for Taskolist...');
        print('‚ÑπÔ∏è Premium-only sync with 5min auto-sync interval');
      }

      // Precisamos obter o userId e isPremium de algum lugar
      // Por enquanto, vamos usar valores padr√£o ou obter do auth service
      final authService = local_di.getIt<IAuthRepository>();
      final currentUser = await authService.currentUser.first;

      if (currentUser == null) {
        if (kDebugMode) {
          print('‚ÑπÔ∏è Skipping sync - no user logged in');
        }
        return;
      }

      final result = await syncService.syncAll(
        userId: currentUser.id,
        isUserPremium: false, // TODO: verificar se usu√°rio √© premium
      );

      result.fold(
        (Failure failure) {
          if (kDebugMode) {
            print('‚ö†Ô∏è Initial sync failed: ${failure.message}');
          }
        },
        (_) {
          if (kDebugMode) {
            print('‚úÖ Initial sync completed successfully');
          }
        },
      );
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error during initial sync: $e');
      }
    }
  }

  /// Limpa dados de sync (√∫til para logout)
  static Future<void> clearSyncData() async {
    try {
      final syncService = local_di.getIt<TaskManagerSyncService>();
      // TaskManagerSyncService n√£o tem clearLocalData
      // Vamos usar dispose() que limpa os recursos
      syncService.dispose();

      if (kDebugMode) {
        print('‚úÖ Sync service disposed successfully');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error disposing sync service: $e');
      }
    }
  }

  /// Obt√©m estat√≠sticas de sincroniza√ß√£o
  static Future<void> printSyncStatistics() async {
    try {
      // TaskManagerSyncService n√£o tem m√©todo getStatistics
      // Vamos apenas mostrar informa√ß√µes b√°sicas
      final syncService = local_di.getIt<TaskManagerSyncService>();

      if (kDebugMode) {
        print('üìä TaskManagerSyncService Statistics:');
        print('   Auto-sync enabled: ‚úÖ (5min intervals)');
        print('   Currently syncing: ${syncService.isSyncing}');
        print('   Premium-only sync: ‚úÖ');
        // Outras estat√≠sticas n√£o est√£o dispon√≠veis no TaskManagerSyncService atual
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error getting sync statistics: $e');
      }
    }
  }

  /// Sync espec√≠fico para tasks (mais frequente)
  static Future<void> syncTasks() async {
    try {
      // TaskManagerSyncService n√£o tem syncTasks p√∫blico
      // Vamos usar syncAll que inclui tasks
      final syncService = local_di.getIt<TaskManagerSyncService>();
      final authService = local_di.getIt<IAuthRepository>();
      final currentUser = await authService.currentUser.first;

      if (currentUser == null) {
        if (kDebugMode) {
          print('‚ÑπÔ∏è Skipping tasks sync - no user logged in');
        }
        return;
      }

      final result = await syncService.syncAll(
        userId: currentUser.id,
        isUserPremium: false, // TODO: verificar se usu√°rio √© premium
      );

      result.fold(
        (Failure failure) {
          if (kDebugMode) {
            print('‚ö†Ô∏è Tasks sync failed: ${failure.message}');
          }
        },
        (_) {
          if (kDebugMode) {
            print('‚úÖ Tasks sync completed');
          }
        },
      );
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error syncing tasks: $e');
      }
    }
  }

  /// Sync espec√≠fico para projects
  static Future<void> syncProjects() async {
    try {
      // TaskManagerSyncService n√£o tem syncProjects p√∫blico
      // Vamos usar syncAll que inclui projects
      final syncService = local_di.getIt<TaskManagerSyncService>();
      final authService = local_di.getIt<IAuthRepository>();
      final currentUser = await authService.currentUser.first;

      if (currentUser == null) {
        if (kDebugMode) {
          print('‚ÑπÔ∏è Skipping projects sync - no user logged in');
        }
        return;
      }

      final result = await syncService.syncAll(
        userId: currentUser.id,
        isUserPremium: false, // TODO: verificar se usu√°rio √© premium
      );

      result.fold(
        (Failure failure) {
          if (kDebugMode) {
            print('‚ö†Ô∏è Projects sync failed: ${failure.message}');
          }
        },
        (_) {
          if (kDebugMode) {
            print('‚úÖ Projects sync completed');
          }
        },
      );
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error syncing projects: $e');
      }
    }
  }
}
