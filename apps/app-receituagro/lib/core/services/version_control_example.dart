import 'dart:developer' as developer;
import 'app_data_manager.dart';
import 'auto_version_control_service.dart';

/// Exemplo de uso do sistema de controle autom√°tico de vers√£o
/// Este arquivo demonstra como usar o novo sistema em diferentes cen√°rios
class VersionControlExample {
  late final AppDataManager _appDataManager;
  late final AutoVersionControlService _versionControlService;

  VersionControlExample() {
    _appDataManager = AppDataManager();
  }

  /// Exemplo 1: Inicializa√ß√£o normal da aplica√ß√£o
  /// Este √© o fluxo que deve ser executado no main.dart ou bootstrap
  Future<void> exampleNormalStartup() async {
    try {
      developer.log('=== EXEMPLO: Inicializa√ß√£o Normal ===', name: 'VersionControlExample');
      
      // Inicializa o sistema completo (incluindo controle de vers√£o autom√°tico)
      final result = await _appDataManager.initialize();
      
      result.fold(
        (error) {
          developer.log('‚ùå Erro na inicializa√ß√£o: $error', name: 'VersionControlExample');
        },
        (_) {
          developer.log('‚úÖ Sistema inicializado com sucesso!', name: 'VersionControlExample');
        },
      );

      // Obt√©m estat√≠sticas do sistema
      final stats = await _appDataManager.getDataStats();
      developer.log('üìä Estat√≠sticas do sistema: $stats', name: 'VersionControlExample');

    } catch (e) {
      developer.log('üí• Erro cr√≠tico no exemplo: $e', name: 'VersionControlExample');
    }
  }

  /// Exemplo 2: Verifica√ß√£o manual de vers√£o
  /// √ötil para debug ou telas de configura√ß√£o
  Future<void> exampleManualVersionCheck() async {
    try {
      developer.log('=== EXEMPLO: Verifica√ß√£o Manual ===', name: 'VersionControlExample');
      
      await _appDataManager.initialize();
      _versionControlService = _appDataManager.versionControlService;

      // Verifica se controle de vers√£o √© necess√°rio
      final isNeeded = await _versionControlService.isVersionControlNeeded();
      developer.log('üîç Controle de vers√£o necess√°rio: $isNeeded', name: 'VersionControlExample');

      // Executa dry-run para ver o que aconteceria
      final dryRunResult = await _versionControlService.performDryRun();
      developer.log('üß™ Dry-run result: ${dryRunResult.toString()}', name: 'VersionControlExample');

      // Obt√©m status completo do sistema
      final systemStatus = await _versionControlService.getSystemStatus();
      developer.log('üñ•Ô∏è Status do sistema: $systemStatus', name: 'VersionControlExample');

    } catch (e) {
      developer.log('üí• Erro no exemplo manual: $e', name: 'VersionControlExample');
    }
  }

  /// Exemplo 3: Recarregamento for√ßado
  /// √ötil para desenvolvimento ou quando usu√°rio quer for√ßar atualiza√ß√£o
  Future<void> exampleForcedReload() async {
    try {
      developer.log('=== EXEMPLO: Recarregamento For√ßado ===', name: 'VersionControlExample');
      
      await _appDataManager.initialize();
      
      // For√ßa recarregamento completo
      final result = await _appDataManager.forceReloadData();
      
      result.fold(
        (error) {
          developer.log('‚ùå Erro no recarregamento for√ßado: $error', name: 'VersionControlExample');
        },
        (_) {
          developer.log('‚úÖ Recarregamento for√ßado conclu√≠do!', name: 'VersionControlExample');
        },
      );

    } catch (e) {
      developer.log('üí• Erro no exemplo de recarregamento: $e', name: 'VersionControlExample');
    }
  }

  /// Exemplo 4: Reimporta√ß√£o de categoria espec√≠fica
  /// √ötil para corre√ß√£o de dados espec√≠ficos
  Future<void> exampleSpecificCategoryReimport() async {
    try {
      developer.log('=== EXEMPLO: Reimporta√ß√£o Espec√≠fica ===', name: 'VersionControlExample');
      
      await _appDataManager.initialize();
      _versionControlService = _appDataManager.versionControlService;

      // Reimporta apenas culturas
      final result = await _versionControlService.reimportSpecificCategory('tbculturas');
      
      result.fold(
        (error) {
          developer.log('‚ùå Erro na reimporta√ß√£o de culturas: $error', name: 'VersionControlExample');
        },
        (count) {
          developer.log('‚úÖ Culturas reimportadas com sucesso: $count registros', name: 'VersionControlExample');
        },
      );

    } catch (e) {
      developer.log('üí• Erro no exemplo de reimporta√ß√£o espec√≠fica: $e', name: 'VersionControlExample');
    }
  }

  /// Exemplo 5: Monitoramento com callback de progresso
  /// Mostra como implementar loading screens durante importa√ß√£o
  Future<void> exampleWithProgressMonitoring() async {
    try {
      developer.log('=== EXEMPLO: Monitoramento de Progresso ===', name: 'VersionControlExample');
      
      await _appDataManager.initialize();
      _versionControlService = _appDataManager.versionControlService;

      // Executa controle de vers√£o com callbacks de progresso
      final result = await _versionControlService.executeVersionControl(
        onProgress: (stage, message, progress) {
          // Este callback pode ser usado para atualizar uma UI de loading
          developer.log(
            'üìä [$stage] $message - ${(progress * 100).toStringAsFixed(1)}%', 
            name: 'VersionControlExample'
          );
          
          // Exemplos de como usar em diferentes est√°gios:
          switch (stage) {
            case 'Verifica√ß√£o':
              // Mostrar: "Verificando vers√£o..."
              break;
            case 'Limpeza':
              // Mostrar: "Limpando dados antigos..."
              break;
            case 'Importa√ß√£o':
              // Mostrar: "Carregando [categoria]..."
              break;
            case 'Finalizando':
              // Mostrar: "Finalizando..."
              break;
            case 'Conclu√≠do':
              // Mostrar: "Processo conclu√≠do!"
              break;
          }
        },
      );

      result.fold(
        (error) {
          developer.log('‚ùå Erro com monitoramento: $error', name: 'VersionControlExample');
        },
        (versionResult) {
          developer.log('‚úÖ Processo monitorado conclu√≠do: ${versionResult.toString()}', 
            name: 'VersionControlExample');
        },
      );

    } catch (e) {
      developer.log('üí• Erro no exemplo de monitoramento: $e', name: 'VersionControlExample');
    }
  }

  /// Exemplo 6: Simula√ß√£o de mudan√ßa de vers√£o
  /// Para testar o comportamento do sistema
  Future<void> exampleVersionChangeSimulation() async {
    try {
      developer.log('=== EXEMPLO: Simula√ß√£o de Mudan√ßa de Vers√£o ===', name: 'VersionControlExample');
      
      await _appDataManager.initialize();
      _versionControlService = _appDataManager.versionControlService;

      // For√ßa uma "mudan√ßa de vers√£o" limpando as informa√ß√µes
      final result = await _versionControlService.forceVersionControl(
        onProgress: (stage, message, progress) {
          developer.log('üîÑ [$stage] $message (${(progress * 100).toInt()}%)', 
            name: 'VersionControlExample');
        },
      );

      result.fold(
        (error) {
          developer.log('‚ùå Erro na simula√ß√£o: $error', name: 'VersionControlExample');
        },
        (versionResult) {
          developer.log('‚úÖ Simula√ß√£o conclu√≠da: ${versionResult.toString()}', 
            name: 'VersionControlExample');
          
          // Mostra detalhes da simula√ß√£o
          final details = versionResult.details;
          developer.log('üìã Detalhes da simula√ß√£o:', name: 'VersionControlExample');
          developer.log('   - A√ß√£o tomada: ${versionResult.actionTaken}', name: 'VersionControlExample');
          developer.log('   - Tempo de execu√ß√£o: ${versionResult.executionTime}', name: 'VersionControlExample');
          developer.log('   - Primeira execu√ß√£o: ${details['is_first_run']}', name: 'VersionControlExample');
          developer.log('   - Vers√£o mudou: ${details['version_changed']}', name: 'VersionControlExample');
        },
      );

    } catch (e) {
      developer.log('üí• Erro na simula√ß√£o: $e', name: 'VersionControlExample');
    }
  }

  /// Executa todos os exemplos em sequ√™ncia
  Future<void> runAllExamples() async {
    developer.log('üöÄ Iniciando todos os exemplos do sistema de controle de vers√£o...', 
      name: 'VersionControlExample');

    await exampleNormalStartup();
    await Future.delayed(const Duration(seconds: 1));

    await exampleManualVersionCheck();
    await Future.delayed(const Duration(seconds: 1));

    await exampleWithProgressMonitoring();
    await Future.delayed(const Duration(seconds: 1));

    await exampleSpecificCategoryReimport();
    await Future.delayed(const Duration(seconds: 1));

    await exampleVersionChangeSimulation();
    await Future.delayed(const Duration(seconds: 1));

    await exampleForcedReload();

    developer.log('üéâ Todos os exemplos executados!', name: 'VersionControlExample');
  }

  /// Cleanup de recursos
  Future<void> dispose() async {
    await _appDataManager.dispose();
  }
}

/// Fun√ß√£o utilit√°ria para executar exemplos em main.dart
Future<void> runVersionControlExamples() async {
  final example = VersionControlExample();
  
  try {
    await example.runAllExamples();
  } finally {
    await example.dispose();
  }
}