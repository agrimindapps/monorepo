// Dart imports:
import 'dart:async';

// Flutter imports:
import 'package:flutter/foundation.dart';
// Package imports:
import 'package:get/get.dart';

import '../../../core/services/app_initialization_service.dart';
import '../../../core/themes/manager.dart';
import '../../injections.dart';
import '../../router.dart';
import '../routing/route_manager.dart';
// Project imports:
import 'bootstrap_phase.dart';
import 'bootstrap_state_machine.dart';
import 'cleanup_registry.dart';

/// Centralizador de inicializa√ß√£o da aplica√ß√£o Receituagro
/// Orquestra todas as fases de inicializa√ß√£o usando State Machine sem race conditions
class AppBootstrapper {
  static AppBootstrapper? _instance;
  static final Completer<AppBootstrapper> _instanceCompleter = Completer<AppBootstrapper>();
  
  static Future<AppBootstrapper> get instance async {
    if (_instance == null) {
      _instance = AppBootstrapper._internal();
      await _instance!._initialize();
      if (!_instanceCompleter.isCompleted) {
        _instanceCompleter.complete(_instance!);
      }
    }
    return await _instanceCompleter.future;
  }

  AppBootstrapper._internal();
  
  late final BootstrapStateMachine _stateMachine;
  
  // Inst√¢ncia do CleanupRegistry
  final CleanupRegistry _cleanupRegistry = CleanupRegistry.instance;

  // Estado da inicializa√ß√£o
  bool _isInitialized = false;
  final List<String> _initializationErrors = [];
  
  // Configura√ß√£o
  int _maxRetryAttempts = 3;
  Duration _retryDelay = const Duration(seconds: 1);
  Duration _phaseTimeout = const Duration(minutes: 2);
  
  /// Inicializa state machine
  Future<void> _initialize() async {
    _stateMachine = await BootstrapStateMachine.instance;
    
    // Escuta transi√ß√µes
    _stateMachine.transitions.listen((transition) {
      debugPrint('üîÑ Bootstrap Transition: ${transition.from.name} -> ${transition.to.name} (${transition.status.displayName})');
      if (transition.error != null) {
        _initializationErrors.add('Erro na transi√ß√£o ${transition.from.name} -> ${transition.to.name}: ${transition.error}');
      }
    });
  }

  /// Verifica se a aplica√ß√£o foi inicializada
  bool get isInitialized => _isInitialized;
  
  /// Fase atual de inicializa√ß√£o
  BootstrapPhase get currentPhase => _stateMachine.currentPhase;
  
  /// Lista de erros ocorridos durante inicializa√ß√£o
  List<String> get initializationErrors => List.unmodifiable(_initializationErrors);
  
  /// Verifica se est√° rodando
  bool get isRunning => _stateMachine.isRunning;

  /// Inicializa toda a aplica√ß√£o em fases ordenadas usando State Machine
  /// Retorna true se sucesso, false se falha cr√≠tica
  Future<bool> initialize({
    Function()? onEntitlementChange,
    int? maxRetryAttempts,
    Duration? retryDelay,
    Duration? phaseTimeout,
  }) async {
    // Evita m√∫ltiplas inicializa√ß√µes simult√¢neas
    if (_isInitialized) {
      debugPrint('üü¢ AppBootstrapper: Aplica√ß√£o j√° inicializada');
      return true;
    }
    
    if (_stateMachine.isRunning) {
      debugPrint('‚ö†Ô∏è AppBootstrapper: Inicializa√ß√£o j√° em andamento');
      return false;
    }

    _maxRetryAttempts = maxRetryAttempts ?? _maxRetryAttempts;
    _retryDelay = retryDelay ?? _retryDelay;
    _phaseTimeout = phaseTimeout ?? _phaseTimeout;
    _initializationErrors.clear();
    
    try {
      debugPrint('üöÄ AppBootstrapper: Iniciando bootstrap da aplica√ß√£o com State Machine');
      
      // Fase 1: Configura√ß√£o
      if (!await _executePhaseWithStateMachine(
        BootstrapPhase.configuration,
        () => _initializeConfiguration(),
      )) {
        await _performRollback();
        return false;
      }
      _cleanupRegistry.markPhaseCompleted(BootstrapPhase.configuration);

      // Fase 2: Depend√™ncias Core
      if (!await _executePhaseWithStateMachine(
        BootstrapPhase.coreDependencies,
        () => _initializeCoreDependencies(),
      )) {
        await _performRollback();
        return false;
      }
      _cleanupRegistry.markPhaseCompleted(BootstrapPhase.coreDependencies);

      // Fase 3: Reposit√≥rios
      if (!await _executePhaseWithStateMachine(
        BootstrapPhase.repositories,
        () => _initializeRepositories(),
      )) {
        await _performRollback();
        return false;
      }
      _cleanupRegistry.markPhaseCompleted(BootstrapPhase.repositories);

      // Fase 4: Controllers
      if (!await _executePhaseWithStateMachine(
        BootstrapPhase.controllers,
        () => _initializeControllers(),
      )) {
        await _performRollback();
        return false;
      }
      _cleanupRegistry.markPhaseCompleted(BootstrapPhase.controllers);

      // Fase 5: Servi√ßos de UI
      if (!await _executePhaseWithStateMachine(
        BootstrapPhase.uiServices,
        () => _initializeUIServices(onEntitlementChange),
      )) {
        await _performRollback();
        return false;
      }
      _cleanupRegistry.markPhaseCompleted(BootstrapPhase.uiServices);

      // Fase 6: Rotas
      if (!await _executePhaseWithStateMachine(
        BootstrapPhase.routes,
        () => _initializeRoutes(),
      )) {
        await _performRollback();
        return false;
      }
      _cleanupRegistry.markPhaseCompleted(BootstrapPhase.routes);

      // Transita para completed
      await _stateMachine.transitionToPhase(
        BootstrapPhase.completed,
        () async {
          _isInitialized = true;
        },
        timeout: _phaseTimeout,
      );
      
      debugPrint('‚úÖ AppBootstrapper: Inicializa√ß√£o conclu√≠da com sucesso');
      return true;
      
    } catch (e, stackTrace) {
      _initializationErrors.add('Erro cr√≠tico na inicializa√ß√£o: $e');
      debugPrint('‚ùå AppBootstrapper: Erro cr√≠tico: $e');
      debugPrint('Stack trace: $stackTrace');
      
      await _performRollback();
      return false;
    }
  }

  /// Executa uma fase usando State Machine com retry e tratamento de erro
  Future<bool> _executePhaseWithStateMachine(
    BootstrapPhase phase,
    Future<void> Function() phaseExecutor,
  ) async {
    debugPrint('üìã AppBootstrapper: Executando fase ${phase.name} com State Machine');
    
    for (int attempt = 1; attempt <= _maxRetryAttempts; attempt++) {
      try {
        // Usa state machine para execu√ß√£o at√¥mica
        final success = await _stateMachine.transitionToPhase(
          phase,
          phaseExecutor,
          timeout: _phaseTimeout,
        );
        
        if (success) {
          debugPrint('‚úÖ AppBootstrapper: Fase ${phase.name} conclu√≠da');
          return true;
        } else {
          throw Exception('Falha na transi√ß√£o de estado para fase ${phase.name}');
        }
        
      } catch (e, stackTrace) {
        final errorMsg = 'Erro na fase ${phase.name} (tentativa $attempt): $e';
        _initializationErrors.add(errorMsg);
        debugPrint('‚ö†Ô∏è AppBootstrapper: $errorMsg');
        
        if (kDebugMode) {
          debugPrint('Stack trace: $stackTrace');
        }
        
        if (attempt < _maxRetryAttempts) {
          debugPrint('üîÑ AppBootstrapper: Tentando novamente em ${_retryDelay.inSeconds}s...');
          await Future.delayed(_retryDelay);
        } else {
          debugPrint('‚ùå AppBootstrapper: Falha definitiva na fase ${phase.name}');
          return false;
        }
      }
    }
    
    return false;
  }

  /// Fase 1: Inicializa configura√ß√µes b√°sicas
  Future<void> _initializeConfiguration() async {
    debugPrint('‚öôÔ∏è Inicializando configura√ß√µes...');
    
    // Verifica se GetX est√° pronto (verifica√ß√£o b√°sica)
    try {
      Get.context; // Teste b√°sico se GetX est√° funcional
    } catch (e) {
      // GetX ainda n√£o est√° completamente inicializado, mas podemos prosseguir
      debugPrint('‚ö†Ô∏è GetX pode n√£o estar completamente inicializado: $e');
    }
    
    // Inicializa tema se necess√°rio
    final themeManager = ThemeManager(); // Singleton initialization
    _cleanupRegistry.registerResource(
      key: 'ThemeManager',
      resource: themeManager,
      phase: BootstrapPhase.configuration,
    );
    
    // Registra cleanup para configura√ß√µes
    _cleanupRegistry.registerCleanup(
      phase: BootstrapPhase.configuration,
      action: () async {
        // Reset configura√ß√µes se necess√°rio
        debugPrint('üßπ Limpando configura√ß√µes...');
      },
      description: 'Reset de configura√ß√µes b√°sicas',
      priority: 1,
    );
    
    debugPrint('‚úÖ Configura√ß√µes inicializadas');
  }

  /// Fase 2: Inicializa depend√™ncias core
  Future<void> _initializeCoreDependencies() async {
    debugPrint('üîß Inicializando depend√™ncias core...');
    
    // Registra o binding principal de forma thread-safe
    await _safeRegisterBinding<ReceituagroBindings>(
      () => ReceituagroBindings(),
      permanent: true,
    );
    
    // Registra cleanup para depend√™ncias core
    _cleanupRegistry.registerCleanup(
      phase: BootstrapPhase.coreDependencies,
      action: () async {
        debugPrint('üßπ Limpando depend√™ncias core...');
        // Remove binding se n√£o for permanente
        try {
          if (Get.isRegistered<ReceituagroBindings>()) {
            Get.delete<ReceituagroBindings>(force: true);
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è Erro ao limpar ReceituagroBindings: $e');
        }
      },
      description: 'Limpeza de depend√™ncias core',
      priority: 5,
    );
    
    debugPrint('‚úÖ Depend√™ncias core inicializadas');
  }

  /// Fase 3: Inicializa reposit√≥rios
  Future<void> _initializeRepositories() async {
    debugPrint('üìÅ Inicializando reposit√≥rios...');
    
    // Executa as depend√™ncias atrav√©s do m√©todo p√∫blico
    final binding = Get.find<ReceituagroBindings>();
    binding.dependencies(); // Chama o m√©todo p√∫blico que faz todo o registro
    
    // Verifica se reposit√≥rios cr√≠ticos foram registrados
    await _validateCriticalDependencies();
    
    // Registra cleanup para reposit√≥rios
    _cleanupRegistry.registerCleanup(
      phase: BootstrapPhase.repositories,
      action: () async {
        debugPrint('üßπ Limpando reposit√≥rios...');
        
        // Lista de reposit√≥rios a serem limpos
        final repoTypes = [
          'DatabaseRepository',
          'DefensivosRepository', 
          'DiagnosticoRepository',
          'PragasRepository',
          'CulturaRepository',
          'FavoritosRepository',
        ];
        
        for (final repoType in repoTypes) {
          try {
            // Tenta obter e limpar cada reposit√≥rio
            final repo = _cleanupRegistry.getResource(repoType);
            if (repo != null) {
              // Tenta chamar dispose/close se existir
              await repo.dispose?.call();
              await repo.close?.call();
            }
          } catch (e) {
            debugPrint('‚ö†Ô∏è Erro ao limpar $repoType: $e');
          }
        }
      },
      description: 'Limpeza de reposit√≥rios e conex√µes',
      priority: 10,
    );
    
    debugPrint('‚úÖ Reposit√≥rios inicializados');
  }

  /// Fase 4: Inicializa controllers
  Future<void> _initializeControllers() async {
    debugPrint('üéÆ Inicializando controllers...');
    
    // Controllers j√° s√£o registrados no dependencies() do binding
    // Aqui podemos adicionar inicializa√ß√µes espec√≠ficas se necess√°rio
    
    debugPrint('‚úÖ Controllers inicializados');
  }

  /// Fase 5: Inicializa servi√ßos de UI
  Future<void> _initializeUIServices(Function()? onEntitlementChange) async {
    debugPrint('üé® Inicializando servi√ßos de UI...');
    
    AppInitializationService? initService;
    if (onEntitlementChange != null) {
      initService = AppInitializationService();
      await initService.initPurchaseServices(
        onEntitlementChange: onEntitlementChange,
      );
      
      _cleanupRegistry.registerResource(
        key: 'AppInitializationService',
        resource: initService,
        phase: BootstrapPhase.uiServices,
      );
    }
    
    // Registra cleanup para servi√ßos de UI
    _cleanupRegistry.registerCleanup(
      phase: BootstrapPhase.uiServices,
      action: () async {
        debugPrint('üßπ Limpando servi√ßos de UI...');
        
        // Limpa servi√ßos de purchase se existirem
        final service = _cleanupRegistry.getResource<AppInitializationService>('AppInitializationService');
        if (service != null) {
          try {
            // Cancela subscriptions de purchase services
            // Service ser√° limpo automaticamente pelo CleanupRegistry
            debugPrint('üßπ AppInitializationService preparado para limpeza');
          } catch (e) {
            debugPrint('‚ö†Ô∏è Erro ao limpar AppInitializationService: $e');
          }
        }
      },
      description: 'Limpeza de servi√ßos de UI e purchase services',
      priority: 3,
    );
    
    debugPrint('‚úÖ Servi√ßos de UI inicializados');
  }

  /// Fase 6: Inicializa sistema de rotas
  Future<void> _initializeRoutes() async {
    debugPrint('üõ£Ô∏è Inicializando rotas...');
    
    await _registerRoutesOptimized();
    
    // Registra cleanup para sistema de rotas
    _cleanupRegistry.registerCleanup(
      phase: BootstrapPhase.routes,
      action: () async {
        debugPrint('üßπ Limpando sistema de rotas...');
        
        // Limpa cache de rotas se existir
        try {
          // RouteManager ser√° limpo pelo CleanupRegistry automaticamente
          debugPrint('üßπ Sistema de rotas preparado para limpeza');
        } catch (e) {
          debugPrint('‚ö†Ô∏è Erro ao preparar limpeza do sistema de rotas: $e');
        }
        
        // Reset de rotas no GetX se necess√°rio
        try {
          // GetX n√£o tem m√©todo direto para limpar rotas,
          // mas elas ser√£o limpas no reset geral
        } catch (e) {
          debugPrint('‚ö†Ô∏è Erro ao limpar rotas: $e');
        }
      },
      description: 'Limpeza do sistema de rotas',
      priority: 2,
    );
    
    debugPrint('‚úÖ Rotas inicializadas');
  }

  /// Registra binding de forma thread-safe usando Completer
  Future<void> _safeRegisterBinding<T extends Bindings>(
    T Function() factory, {
    bool permanent = false,
  }) async {
    // Usa completer para garantir thread-safety
    final completer = Completer<void>();
    
    try {
      if (!Get.isRegistered<T>()) {
        Get.put<T>(factory(), permanent: permanent);
      }
      completer.complete();
    } catch (e) {
      completer.completeError(e);
    }
    
    return completer.future;
  }

  /// Registra rotas usando RouteManager otimizado
  Future<void> _registerRoutesOptimized() async {
    final routeManager = RouteManager.instance;
    
    final result = await routeManager.registerRoutes(
      AppPages.routes,
      version: '1.0.0', // Vers√£o pode ser din√¢mica baseada no app version
    );
    
    if (result.isSuccess) {
      debugPrint('üìç RouteManager: ${result.totalRegistered} rotas registradas, ${result.totalDuplicates} duplicatas evitadas');
      
      if (result.hasErrors) {
        for (final error in result.errors) {
          debugPrint('‚ö†Ô∏è RouteManager: $error');
        }
      }
    } else {
      debugPrint('‚ùå RouteManager: Falha no registro de rotas: ${result.error}');
      throw Exception('Falha no registro de rotas: ${result.error}');
    }
  }

  /// Valida se depend√™ncias cr√≠ticas foram registradas
  Future<void> _validateCriticalDependencies() async {
    final criticalServices = [
      'LocalStorageService',
      'DatabaseRepository',
    ];
    
    for (final serviceName in criticalServices) {
      if (!Get.isRegistered(tag: serviceName) && 
          !_isServiceRegisteredByType(serviceName)) {
        debugPrint('‚ö†Ô∏è Servi√ßo cr√≠tico n√£o encontrado: $serviceName');
      }
    }
  }

  /// Verifica se servi√ßo est√° registrado por tipo (fallback)
  bool _isServiceRegisteredByType(String typeName) {
    try {
      switch (typeName) {
        case 'LocalStorageService':
          Get.find<dynamic>(tag: typeName);
          return true;
        case 'DatabaseRepository':
          Get.find<dynamic>(tag: typeName);
          return true;
        default:
          return false;
      }
    } catch (e) {
      return false;
    }
  }

  /// Realiza rollback usando State Machine e CleanupRegistry
  Future<void> _performRollback() async {
    debugPrint('üîÑ AppBootstrapper: Executando rollback com State Machine...');
    
    try {
      // Transita para rollback usando state machine
      await _stateMachine.transitionToPhase(
        BootstrapPhase.rollback,
        () async {
          // Executa rollback real usando CleanupRegistry
          final result = await _cleanupRegistry.performRollback(
            fromPhase: currentPhase,
            force: true, // For√ßa limpeza mesmo com erros
          );
          
          if (result.success) {
            debugPrint('‚úÖ AppBootstrapper: Rollback real conclu√≠do com sucesso em ${result.duration.inMilliseconds}ms');
            
            // Log detalhado do que foi limpo
            for (final entry in result.phaseResults.entries) {
              final phaseResult = entry.value;
              debugPrint('  üìã ${entry.key.name}: ${phaseResult.successfulActions}/${phaseResult.totalActions} a√ß√µes executadas');
              
              if (phaseResult.errors.isNotEmpty) {
                debugPrint('    ‚ö†Ô∏è Erros: ${phaseResult.errors.join(", ")}');
              }
            }
          } else {
            debugPrint('‚ö†Ô∏è AppBootstrapper: Rollback parcialmente falhou: ${result.error ?? "Erros em fases individuais"}');
            debugPrint('    Dura√ß√£o: ${result.duration.inMilliseconds}ms');
            
            // Log de erros por fase
            for (final entry in result.phaseResults.entries) {
              final phaseResult = entry.value;
              if (!phaseResult.success) {
                debugPrint('  ‚ùå ${entry.key.name}: ${phaseResult.errors.join(", ")}');
              }
            }
          }
        },
        timeout: _phaseTimeout,
      );
      
      // Reset final do estado
      _isInitialized = false;
      _initializationErrors.clear();
      
      // Reset da state machine
      await _stateMachine.reset();
      
      debugPrint('üîÑ AppBootstrapper: Estado resetado - app pronto para nova inicializa√ß√£o');
      
    } catch (e, stackTrace) {
      debugPrint('‚ùå AppBootstrapper: Erro cr√≠tico durante rollback: $e');
      if (kDebugMode) {
        debugPrint('Stack trace: $stackTrace');
      }
      
      // Fallback: reset b√°sico se rollback avan√ßado falhar
      _isInitialized = false;
      _initializationErrors.clear();
      
      // Reset da state machine
      await _stateMachine.reset();
      
      // Tenta limpeza emergencial do GetX
      try {
        Get.reset();
        debugPrint('üö® Limpeza emergencial do GetX executada');
      } catch (getxError) {
        debugPrint('üö® Falha na limpeza emergencial do GetX: $getxError');
      }
    }
  }

  /// For√ßa reinicializa√ß√£o usando State Machine
  Future<bool> reinitialize({
    Function()? onEntitlementChange,
  }) async {
    debugPrint('üîÑ AppBootstrapper: For√ßando reinicializa√ß√£o com State Machine...');
    
    _isInitialized = false;
    _initializationErrors.clear();
    
    // Reset da state machine
    await _stateMachine.reset();
    
    return await initialize(onEntitlementChange: onEntitlementChange);
  }

  /// Obt√©m estat√≠sticas do sistema de rollback
  Map<String, dynamic> getRollbackStats() {
    return _cleanupRegistry.getStats();
  }
  
  /// Obt√©m relat√≥rio detalhado do sistema de rollback
  String getRollbackReport() {
    return _cleanupRegistry.generateReport();
  }
  
  /// For√ßa limpeza de recursos sem reinicializar
  Future<RollbackResult> forceCleanup({BootstrapPhase? fromPhase}) async {
    debugPrint('üßπ AppBootstrapper: For√ßando limpeza de recursos...');
    
    final result = await _cleanupRegistry.performRollback(
      fromPhase: fromPhase,
      force: true,
    );
    
    debugPrint('üßπ AppBootstrapper: Limpeza for√ßada ${result.success ? 'conclu√≠da' : 'falhou'}');
    return result;
  }

  /// Obt√©m status de todas as fases
  Map<BootstrapPhase, PhaseStatus> getAllPhaseStatuses() {
    return _stateMachine.getAllPhaseStatuses();
  }
  
  /// Aguarda uma fase espec√≠fica ser conclu√≠da
  Future<bool> waitForPhase(BootstrapPhase phase, {Duration? timeout}) async {
    return await _stateMachine.waitForPhase(phase, timeout: timeout);
  }
  
  /// Limpa inst√¢ncia (para testes)
  static Future<void> resetInstance() async {
    if (_instance != null) {
      await _instance!._stateMachine.dispose();
      await _instance!._cleanupRegistry.performRollback(force: true);
    }
    BootstrapStateMachine.resetInstance();
    CleanupRegistry.resetInstance();
    _instance = null;
  }
}

