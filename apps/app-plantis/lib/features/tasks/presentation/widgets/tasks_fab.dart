import 'package:core/core.dart';
import 'package:flutter/material.dart';

import '../../../../core/providers/tasks_providers.dart';
import '../../domain/entities/task.dart' as task_entity;
import 'task_creation_dialog.dart';

class TasksFab extends ConsumerWidget {
  const TasksFab({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final theme = Theme.of(context);

    return FloatingActionButton.extended(
      onPressed: () => _showAddTaskDialog(context, ref),
      backgroundColor: theme.colorScheme.primary,
      foregroundColor: theme.colorScheme.onPrimary,
      icon: const Icon(Icons.add),
      label: const Text('Nova Tarefa'),
      elevation: 6,
    );
  }

  Future<void> _showAddTaskDialog(BuildContext context, WidgetRef ref) async {
    final result = await TaskCreationDialog.show(context: context);
    if (result == null || !context.mounted) return;

    final task = task_entity.Task(
      id: '', // Will be generated by the repository
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
      title: result.title,
      description: result.description,
      plantId: result.plantId,
      type: result.type,
      priority: result.priority,
      dueDate: result.dueDate,
    );

    try {
      final success = await ref.read(tasksProvider.notifier).addTask(task);
      if (!context.mounted) return;

      if (success) {
        _showSuccessSnackbar(context, 'Tarefa "${result.title}" criada com sucesso!');
      } else {
        _showErrorSnackbar(context, 'Erro ao criar tarefa. Tente novamente.');
      }
    } catch (e) {
      if (context.mounted) {
        _showErrorSnackbar(context, 'Ocorreu um erro inesperado.');
      }
    }
  }

  void _showSuccessSnackbar(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Theme.of(context).colorScheme.primary,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _showErrorSnackbar(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Theme.of(context).colorScheme.error,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }
}
