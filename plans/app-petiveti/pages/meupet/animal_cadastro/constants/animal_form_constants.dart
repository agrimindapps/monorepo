// Flutter imports:
import 'package:flutter/material.dart';

/// Constantes de valida√ß√£o para formul√°rio de animais
///
/// Este arquivo centraliza todos os valores usados nas valida√ß√µes,
/// facilitando manuten√ß√£o e configura√ß√£o por esp√©cie quando necess√°rio.
class AnimalFormConstants {
  // === COMPRIMENTO DE TEXTO ===

  /// Comprimento m√°ximo permitido para o nome do animal
  static const int maxNomeLength = 80;

  /// Comprimento m√≠nimo para o nome do animal
  static const int minNomeLength = 2;

  /// Comprimento m√°ximo para o campo ra√ßa
  static const int maxRacaLength = 80;

  /// Comprimento m√°ximo para observa√ß√µes
  static const int maxObservacoesLength = 255;

  // === LIMITES NUM√âRICOS ===

  /// Peso m√°ximo permitido em kg (aplic√°vel para a maioria das esp√©cies)
  static const double maxPesoKg = 500.0;

  /// Peso m√≠nimo permitido em kg
  static const double minPesoKg = 0.0;

  // === LIMITES ESPEC√çFICOS POR ESP√âCIE ===

  /// Weight limits by species (in kg)
  static const Map<String, WeightLimits> weightLimitsBySpecies = {
    'Cachorro': WeightLimits(min: 0.1, max: 150.0),
    'Gato': WeightLimits(min: 0.1, max: 25.0),
    'Ave': WeightLimits(min: 0.01, max: 50.0),
    'Peixe': WeightLimits(min: 0.001, max: 500.0),
    'Coelho': WeightLimits(min: 0.1, max: 15.0),
    'Hamster': WeightLimits(min: 0.01, max: 1.0),
    'R√©ptil': WeightLimits(min: 0.01, max: 200.0),
    'Porquinho da √çndia': WeightLimits(min: 0.1, max: 3.0),
    'Fur√£o': WeightLimits(min: 0.1, max: 5.0),
    'Outro': WeightLimits(min: 0.001, max: 500.0),
  };

  /// Legacy constant name for backward compatibility
  @Deprecated('Use weightLimitsBySpecies instead')
  static const Map<String, WeightLimits> pesoLimitesPorEspecie = weightLimitsBySpecies;

  // === DATAS ===

  /// Ano m√≠nimo para data de nascimento
  static const int minAnoNascimento = 2000;

  // === ERROR MESSAGES ===

  /// Standardized error messages
  static const String requiredFieldMessage = 'Campo obrigat√≥rio';
  static const String nameTooShortMessage = 'Nome muito curto';
  static const String nameTooLongMessage =
      'Nome muito longo (m√°x. 80 caracteres)';
  static const String breedTooLongMessage =
      'Ra√ßa muito longa (m√°x. 80 caracteres)';
  static const String invalidNumberMessage = 'Digite um n√∫mero v√°lido';
  static const String weightTooLowMessage = 'O peso deve ser maior que zero';
  static const String weightTooHighMessage = 'Peso parece muito alto, verifique';

  // === LEGACY NAMES (for backward compatibility) ===
  @Deprecated('Use requiredFieldMessage instead')
  static const String msgCampoObrigatorio = requiredFieldMessage;
  @Deprecated('Use nameTooShortMessage instead')
  static const String msgNomeMuitoCurto = nameTooShortMessage;
  @Deprecated('Use nameTooLongMessage instead')
  static const String msgNomeMuitoLongo = nameTooLongMessage;
  @Deprecated('Use breedTooLongMessage instead')
  static const String msgRacaMuitoLonga = breedTooLongMessage;
  @Deprecated('Use invalidNumberMessage instead')
  static const String msgNumeroInvalido = invalidNumberMessage;
  @Deprecated('Use weightTooLowMessage instead')
  static const String msgPesoMenorQueZero = weightTooLowMessage;
  @Deprecated('Use weightTooHighMessage instead')
  static const String msgPesoMuitoAlto = weightTooHighMessage;

  // === CONFIGURA√á√ïES DE UI ===

  /// N√∫mero m√°ximo de linhas para o campo observa√ß√µes
  static const int maxLinhasObservacoes = 5;

  // === SE√á√ïES DO FORMUL√ÅRIO ===

  /// T√≠tulos das se√ß√µes do formul√°rio
  static const Map<String, String> titulosSecoes = {
    'identificacao': 'Identifica√ß√£o do Animal',
    'informacoes_fisicas': 'Informa√ß√µes F√≠sicas',
    'informacoes_adicionais': 'Informa√ß√µes Adicionais',
  };

  /// √çcones das se√ß√µes do formul√°rio
  static const Map<String, IconData> iconesSecoes = {
    'identificacao': Icons.pets,
    'informacoes_fisicas': Icons.monitor_weight,
    'informacoes_adicionais': Icons.notes,
  };

  /// R√≥tulos dos campos do formul√°rio
  static const Map<String, String> rotulosCampos = {
    'nome': 'Nome',
    'especie': 'Esp√©cie',
    'raca': 'Ra√ßa',
    'cor': 'Cor',
    'sexo': 'Sexo',
    'data_nascimento': 'Data de Nascimento',
    'peso_atual': 'Peso Atual (kg)',
    'observacoes': 'Observa√ß√µes',
  };

  /// Dicas dos campos do formul√°rio
  static const Map<String, String> dicasCampos = {
    'nome': 'Digite o nome do animal',
    'especie': 'Selecione a esp√©cie',
    'raca': 'Ex: Labrador, Persa, SRD...',
    'cor': 'Ex: Marrom, Preto, Branco...',
    'sexo': 'Selecione o sexo',
    'data_nascimento': 'dd/mm/aaaa',
    'peso_atual': 'Ex: 5.5 ou 5,5',
    'observacoes': 'Informa√ß√µes adicionais sobre o animal...',
  };

  // === ESPA√áAMENTOS ===

  /// Espa√ßamento entre se√ß√µes
  static const double sectionSpacing = 16.0;
  
  /// Espa√ßamento entre campos
  static const double fieldSpacing = 12.0;

  // === OP√á√ïES DE FORMUL√ÅRIO ===

  /// Species options with their corresponding Material Design icons
  static const Map<String, IconData> speciesOptions = {
    'Cachorro': Icons.pets,
    'Gato': Icons.catching_pokemon,
    'Ave': Icons.flutter_dash,
    'Peixe': Icons.water,
    'Coelho': Icons.cruelty_free,
    'Hamster': Icons.pest_control_rodent,
    'R√©ptil': Icons.air,
    'Porquinho da √çndia': Icons.catching_pokemon,
    'Fur√£o': Icons.pets,
    'Outro': Icons.more_horiz,
  };

  /// Available sex options
  static const List<String> sexOptions = ['Macho', 'F√™mea'];

  /// Legacy constant names for backward compatibility
  @Deprecated('Use speciesOptions instead')
  static const Map<String, IconData> especiesOptions = speciesOptions;
  @Deprecated('Use sexOptions instead')
  static const List<String> sexoOptions = sexOptions;

  /// Emojis corresponding to species for better visualization
  static const Map<String, String> speciesEmojis = {
    'Cachorro': 'üêï',
    'Gato': 'üê±',
    'Ave': 'üê¶',
    'Peixe': 'üê†',
    'Coelho': 'üê∞',
    'Hamster': 'üêπ',
    'R√©ptil': 'ü¶é',
    'Porquinho da √çndia': 'üê≠',
    'Fur√£o': 'ü¶î',
    'Outro': 'üêæ',
  };

  /// Legacy constant name for backward compatibility
  @Deprecated('Use speciesEmojis instead')
  static const Map<String, String> especiesComEmojis = speciesEmojis;

  // === REGIONAL CONFIGURATIONS ===

  /// Configurations for different locales (preparing for internationalization)
  static const Map<String, AnimalFormConfig> configsByRegion = {
    'pt_BR': AnimalFormConfig(
      formatoData: 'dd/MM/yyyy',
      separadorDecimal: ',',
      moedaLocal: 'R\$',
    ),
    'en_US': AnimalFormConfig(
      formatoData: 'MM/dd/yyyy',
      separadorDecimal: '.',
      moedaLocal: '\$',
    ),
  };

  /// Default configuration (Brazil)
  static const AnimalFormConfig defaultConfig = AnimalFormConfig(
    formatoData: 'dd/MM/yyyy',
    separadorDecimal: ',',
    moedaLocal: 'R\$',
  );

  /// Legacy constant names for backward compatibility
  @Deprecated('Use configsByRegion instead')
  static const Map<String, AnimalFormConfig> configsPorRegiao = configsByRegion;
  @Deprecated('Use defaultConfig instead')
  static const AnimalFormConfig configPadrao = defaultConfig;
}

/// Class to represent weight limits by species
class WeightLimits {
  final double min;
  final double max;

  const WeightLimits({
    required this.min,
    required this.max,
  });
}

/// Legacy class name for backward compatibility
@Deprecated('Use WeightLimits instead')
class PesoLimites extends WeightLimits {
  const PesoLimites({required super.min, required super.max});
}

/// Class for regional form configurations
class AnimalFormConfig {
  final String formatoData;
  final String separadorDecimal;
  final String moedaLocal;

  const AnimalFormConfig({
    required this.formatoData,
    required this.separadorDecimal,
    required this.moedaLocal,
  });
}
