// Mocks generated by Mockito 5.4.5 from annotations
// in app_task_manager/test/domain/usecases/reorder_tasks_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:app_task_manager/core/errors/failures.dart' as _i5;
import 'package:app_task_manager/domain/entities/task_entity.dart' as _i6;
import 'package:app_task_manager/domain/repositories/task_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> createTask(
          _i6.TaskEntity? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #createTask,
            [task],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>> getTask(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTask,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.TaskEntity>(
          this,
          Invocation.method(
            #getTask,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>> getTasks({
    String? listId,
    String? userId,
    _i6.TaskStatus? status,
    _i6.TaskPriority? priority,
    bool? isStarred,
    DateTime? dueBefore,
    DateTime? dueAfter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
          {
            #listId: listId,
            #userId: userId,
            #status: status,
            #priority: priority,
            #isStarred: isStarred,
            #dueBefore: dueBefore,
            #dueAfter: dueAfter,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.TaskEntity>>(
          this,
          Invocation.method(
            #getTasks,
            [],
            {
              #listId: listId,
              #userId: userId,
              #status: status,
              #priority: priority,
              #isStarred: isStarred,
              #dueBefore: dueBefore,
              #dueAfter: dueAfter,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateTask(_i6.TaskEntity? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updateTask,
            [task],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteTask(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteTask,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateTaskStatus(
    String? id,
    _i6.TaskStatus? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTaskStatus,
          [
            id,
            status,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updateTaskStatus,
            [
              id,
              status,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> toggleTaskStar(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleTaskStar,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #toggleTaskStar,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> reorderTasks(
          List<String>? taskIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #reorderTasks,
          [taskIds],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #reorderTasks,
            [taskIds],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Stream<List<_i6.TaskEntity>> watchTasks({
    String? listId,
    String? userId,
    _i6.TaskStatus? status,
    _i6.TaskPriority? priority,
    bool? isStarred,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchTasks,
          [],
          {
            #listId: listId,
            #userId: userId,
            #status: status,
            #priority: priority,
            #isStarred: isStarred,
          },
        ),
        returnValue: _i4.Stream<List<_i6.TaskEntity>>.empty(),
      ) as _i4.Stream<List<_i6.TaskEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>> searchTasks(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchTasks,
          [query],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.TaskEntity>>(
          this,
          Invocation.method(
            #searchTasks,
            [query],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>> getSubtasks(
          String? parentTaskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubtasks,
          [parentTaskId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.TaskEntity>>(
          this,
          Invocation.method(
            #getSubtasks,
            [parentTaskId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>>);
}
