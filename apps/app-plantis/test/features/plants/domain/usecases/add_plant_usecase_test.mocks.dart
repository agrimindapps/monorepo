// Mocks generated by Mockito 5.4.5 from annotations
// in app_plantis/test/features/plants/domain/usecases/add_plant_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:app_plantis/core/services/task_generation_service.dart' as _i4;
import 'package:app_plantis/features/plants/domain/entities/plant.dart' as _i8;
import 'package:app_plantis/features/plants/domain/repositories/plants_repository.dart'
    as _i5;
import 'package:app_plantis/features/tasks/domain/entities/task.dart' as _i10;
import 'package:app_plantis/features/tasks/domain/repositories/tasks_repository.dart'
    as _i3;
import 'package:app_plantis/features/tasks/domain/usecases/generate_initial_tasks_usecase.dart'
    as _i9;
import 'package:core/core.dart' as _i7;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTasksRepository_1 extends _i1.SmartFake
    implements _i3.TasksRepository {
  _FakeTasksRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskGenerationService_2 extends _i1.SmartFake
    implements _i4.TaskGenerationService {
  _FakeTaskGenerationService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PlantsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlantsRepository extends _i1.Mock implements _i5.PlantsRepository {
  MockPlantsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Plant>>> getPlants() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlants,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, List<_i8.Plant>>>.value(
            _FakeEither_0<_i7.Failure, List<_i8.Plant>>(
          this,
          Invocation.method(
            #getPlants,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Plant>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.Plant>> getPlantById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlantById,
          [id],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i8.Plant>>.value(
            _FakeEither_0<_i7.Failure, _i8.Plant>(
          this,
          Invocation.method(
            #getPlantById,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.Plant>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.Plant>> addPlant(_i8.Plant? plant) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPlant,
          [plant],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i8.Plant>>.value(
            _FakeEither_0<_i7.Failure, _i8.Plant>(
          this,
          Invocation.method(
            #addPlant,
            [plant],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.Plant>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.Plant>> updatePlant(
          _i8.Plant? plant) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePlant,
          [plant],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i8.Plant>>.value(
            _FakeEither_0<_i7.Failure, _i8.Plant>(
          this,
          Invocation.method(
            #updatePlant,
            [plant],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.Plant>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, void>> deletePlant(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deletePlant,
          [id],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, void>>.value(
            _FakeEither_0<_i7.Failure, void>(
          this,
          Invocation.method(
            #deletePlant,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, void>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Plant>>> searchPlants(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchPlants,
          [query],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, List<_i8.Plant>>>.value(
            _FakeEither_0<_i7.Failure, List<_i8.Plant>>(
          this,
          Invocation.method(
            #searchPlants,
            [query],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Plant>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Plant>>> getPlantsBySpace(
          String? spaceId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlantsBySpace,
          [spaceId],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, List<_i8.Plant>>>.value(
            _FakeEither_0<_i7.Failure, List<_i8.Plant>>(
          this,
          Invocation.method(
            #getPlantsBySpace,
            [spaceId],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Plant>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, int>> getPlantsCount() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlantsCount,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, int>>.value(
            _FakeEither_0<_i7.Failure, int>(
          this,
          Invocation.method(
            #getPlantsCount,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, int>>);

  @override
  _i6.Stream<List<_i8.Plant>> watchPlants() => (super.noSuchMethod(
        Invocation.method(
          #watchPlants,
          [],
        ),
        returnValue: _i6.Stream<List<_i8.Plant>>.empty(),
      ) as _i6.Stream<List<_i8.Plant>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, void>> syncPendingChanges() =>
      (super.noSuchMethod(
        Invocation.method(
          #syncPendingChanges,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, void>>.value(
            _FakeEither_0<_i7.Failure, void>(
          this,
          Invocation.method(
            #syncPendingChanges,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, void>>);
}

/// A class which mocks [GenerateInitialTasksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenerateInitialTasksUseCase extends _i1.Mock
    implements _i9.GenerateInitialTasksUseCase {
  MockGenerateInitialTasksUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TasksRepository get tasksRepository => (super.noSuchMethod(
        Invocation.getter(#tasksRepository),
        returnValue: _FakeTasksRepository_1(
          this,
          Invocation.getter(#tasksRepository),
        ),
      ) as _i3.TasksRepository);

  @override
  _i4.TaskGenerationService get taskGenerationService => (super.noSuchMethod(
        Invocation.getter(#taskGenerationService),
        returnValue: _FakeTaskGenerationService_2(
          this,
          Invocation.getter(#taskGenerationService),
        ),
      ) as _i4.TaskGenerationService);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i10.Task>>> call(
          _i9.GenerateInitialTasksParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, List<_i10.Task>>>.value(
            _FakeEither_0<_i7.Failure, List<_i10.Task>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i10.Task>>>);
}
