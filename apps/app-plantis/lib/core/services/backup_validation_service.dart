import 'package:core/core.dart';
import 'package:flutter/foundation.dart';

import '../data/models/backup_model.dart';

/// Service respons√°vel pela valida√ß√£o de integridade de backups
/// Implementa Single Responsibility Principle - apenas valida√ß√£o
class BackupValidationService {
  const BackupValidationService();

  /// Valida a integridade completa de um backup
  Future<Either<Failure, ValidationResult>> validateBackupIntegrity(
    BackupModel backup,
  ) async {
    try {
      debugPrint('üîç Validando integridade do backup...');

      final validationErrors = <String>[];
      final validationWarnings = <String>[];

      // 1. Valida√ß√£o b√°sica da estrutura
      final structureValidation = _validateBackupStructure(backup);
      structureValidation.fold(
        (error) => validationErrors.add(error),
        (_) => {},
      );

      // 2. Valida√ß√£o de compatibilidade
      final compatibilityValidation = _validateCompatibility(backup);
      compatibilityValidation.fold(
        (error) => validationErrors.add(error),
        (_) => {},
      );

      // 3. Valida√ß√£o de metadados
      final metadataValidation = _validateMetadata(backup);
      metadataValidation.fold(
        (error) => validationErrors.add(error),
        (_) => {},
      );

      // 4. Valida√ß√£o dos dados de plantas
      final plantsValidation = await _validatePlantsData(backup.data.plants);
      plantsValidation.fold(
        (error) => validationErrors.add(error),
        (warnings) => validationWarnings.addAll(warnings),
      );

      // 5. Valida√ß√£o dos dados de tarefas
      final tasksValidation = await _validateTasksData(backup.data.tasks);
      tasksValidation.fold(
        (error) => validationErrors.add(error),
        (warnings) => validationWarnings.addAll(warnings),
      );

      // 6. Valida√ß√£o dos dados de espa√ßos
      final spacesValidation = await _validateSpacesData(backup.data.spaces);
      spacesValidation.fold(
        (error) => validationErrors.add(error),
        (warnings) => validationWarnings.addAll(warnings),
      );

      // 7. Valida√ß√£o de configura√ß√µes
      final settingsValidation = _validateSettingsData(backup.data.settings);
      settingsValidation.fold(
        (error) => validationErrors.add(error),
        (warnings) => validationWarnings.addAll(warnings),
      );

      // Determinar resultado final
      if (validationErrors.isNotEmpty) {
        return Left(
          ValidationFailure(
            'Backup possui erros cr√≠ticos: ${validationErrors.join('; ')}',
          ),
        );
      }

      return Right(
        ValidationResult(
          isValid: true,
          errors: validationErrors,
          warnings: validationWarnings,
          validatedItemsCount: _countValidatedItems(backup),
        ),
      );
    } catch (e) {
      debugPrint('‚ùå Erro durante valida√ß√£o: $e');
      return Left(ValidationFailure('Erro na valida√ß√£o: ${e.toString()}'));
    }
  }

  /// Valida√ß√£o r√°pida apenas da estrutura b√°sica
  Either<String, void> validateBasicStructure(BackupModel backup) {
    return _validateBackupStructure(backup);
  }

  /// Valida√ß√£o de compatibilidade de vers√£o
  Either<String, void> validateCompatibility(BackupModel backup) {
    return _validateCompatibility(backup);
  }

  // ===== VALIDA√á√ïES ESPEC√çFICAS =====

  /// Valida estrutura b√°sica do backup
  Either<String, void> _validateBackupStructure(BackupModel backup) {
    if (backup.version.isEmpty) {
      return const Left('Backup n√£o possui vers√£o definida');
    }

    if (backup.userId.isEmpty) {
      return const Left('Backup n√£o possui ID de usu√°rio');
    }

    if (backup.data.plants.isEmpty &&
        backup.data.tasks.isEmpty &&
        backup.data.spaces.isEmpty) {
      return const Left('Backup n√£o cont√©m dados');
    }

    return const Right(null);
  }

  /// Valida compatibilidade do backup
  Either<String, void> _validateCompatibility(BackupModel backup) {
    if (!backup.isCompatible) {
      return const Left('Backup incompat√≠vel com a vers√£o atual do app');
    }
    return const Right(null);
  }

  /// Valida metadados do backup
  Either<String, void> _validateMetadata(BackupModel backup) {
    final metadata = backup.metadata;

    if (metadata.plantsCount < 0 ||
        metadata.tasksCount < 0 ||
        metadata.spacesCount < 0) {
      return const Left('Metadados possuem valores inv√°lidos');
    }

    // Validar consist√™ncia entre metadados e dados reais
    if (metadata.plantsCount != backup.data.plants.length) {
      return Left(
        'Inconsist√™ncia nos metadados: esperado ${metadata.plantsCount} plantas, '
        'encontrado ${backup.data.plants.length}',
      );
    }

    if (metadata.tasksCount != backup.data.tasks.length) {
      return Left(
        'Inconsist√™ncia nos metadados: esperado ${metadata.tasksCount} tarefas, '
        'encontrado ${backup.data.tasks.length}',
      );
    }

    if (metadata.spacesCount != backup.data.spaces.length) {
      return Left(
        'Inconsist√™ncia nos metadados: esperado ${metadata.spacesCount} espa√ßos, '
        'encontrado ${backup.data.spaces.length}',
      );
    }

    return const Right(null);
  }

  /// Valida dados de plantas
  Future<Either<String, List<String>>> _validatePlantsData(
    List<Map<String, dynamic>> plantsData,
  ) async {
    final warnings = <String>[];

    for (int i = 0; i < plantsData.length; i++) {
      final plant = plantsData[i];

      // Valida√ß√£o de campos obrigat√≥rios
      if (!plant.containsKey('id') || plant['id'].toString().isEmpty) {
        return Left('Planta ${i + 1} n√£o possui ID');
      }

      if (!plant.containsKey('name') || plant['name'].toString().isEmpty) {
        return Left('Planta ${i + 1} n√£o possui nome');
      }

      if (!plant.containsKey('userId') || plant['userId'].toString().isEmpty) {
        return Left('Planta ${i + 1} n√£o possui ID de usu√°rio');
      }

      // Valida√ß√µes que geram warnings (n√£o impedem restore)
      if ((!plant.containsKey('imageUrls') ||
              (plant['imageUrls'] as List?)?.isEmpty == true) &&
          (!plant.containsKey('imageBase64') ||
              plant['imageBase64'].toString().isEmpty)) {
        warnings.add('Planta "${plant['name']}" n√£o possui imagem');
      }

      if (!plant.containsKey('species') ||
          plant['species'].toString().isEmpty) {
        warnings.add('Planta "${plant['name']}" n√£o possui esp√©cie informada');
      }

      // Valida√ß√£o de datas
      if (plant.containsKey('plantingDate')) {
        if (!_isValidDate(plant['plantingDate'])) {
          return Left('Planta ${i + 1} possui data de plantio inv√°lida');
        }
      }
    }

    return Right(warnings);
  }

  /// Valida dados de tarefas
  Future<Either<String, List<String>>> _validateTasksData(
    List<Map<String, dynamic>> tasksData,
  ) async {
    final warnings = <String>[];

    for (int i = 0; i < tasksData.length; i++) {
      final task = tasksData[i];

      // Valida√ß√£o de campos obrigat√≥rios
      if (!task.containsKey('id') || task['id'].toString().isEmpty) {
        return Left('Tarefa ${i + 1} n√£o possui ID');
      }

      if (!task.containsKey('name') || task['name'].toString().isEmpty) {
        return Left('Tarefa ${i + 1} n√£o possui nome');
      }

      if (!task.containsKey('plantId') || task['plantId'].toString().isEmpty) {
        return Left('Tarefa ${i + 1} n√£o est√° associada a uma planta');
      }

      if (!task.containsKey('userId') || task['userId'].toString().isEmpty) {
        return Left('Tarefa ${i + 1} n√£o possui ID de usu√°rio');
      }

      // Valida√ß√µes que geram warnings
      if (!task.containsKey('description') ||
          task['description'].toString().isEmpty) {
        warnings.add('Tarefa "${task['name']}" n√£o possui descri√ß√£o');
      }

      // Valida√ß√£o de datas
      if (task.containsKey('dueDate')) {
        if (!_isValidDate(task['dueDate'])) {
          return Left('Tarefa ${i + 1} possui data de vencimento inv√°lida');
        }
      }

      if (task.containsKey('completedAt')) {
        if (!_isValidDate(task['completedAt'])) {
          return Left('Tarefa ${i + 1} possui data de conclus√£o inv√°lida');
        }
      }
    }

    return Right(warnings);
  }

  /// Valida dados de espa√ßos
  Future<Either<String, List<String>>> _validateSpacesData(
    List<Map<String, dynamic>> spacesData,
  ) async {
    final warnings = <String>[];

    for (int i = 0; i < spacesData.length; i++) {
      final space = spacesData[i];

      // Valida√ß√£o de campos obrigat√≥rios
      if (!space.containsKey('id') || space['id'].toString().isEmpty) {
        return Left('Espa√ßo ${i + 1} n√£o possui ID');
      }

      if (!space.containsKey('name') || space['name'].toString().isEmpty) {
        return Left('Espa√ßo ${i + 1} n√£o possui nome');
      }

      if (!space.containsKey('userId') || space['userId'].toString().isEmpty) {
        return Left('Espa√ßo ${i + 1} n√£o possui ID de usu√°rio');
      }

      // Valida√ß√µes que geram warnings
      if (!space.containsKey('description') ||
          space['description'].toString().isEmpty) {
        warnings.add('Espa√ßo "${space['name']}" n√£o possui descri√ß√£o');
      }
    }

    return Right(warnings);
  }

  /// Valida dados de configura√ß√µes
  Either<String, List<String>> _validateSettingsData(
    Map<String, dynamic> settings,
  ) {
    final warnings = <String>[];

    // Valida√ß√µes b√°sicas de configura√ß√µes
    if (settings.isEmpty) {
      warnings.add('Backup n√£o cont√©m configura√ß√µes do usu√°rio');
    }

    // Validar estrutura esperada
    final expectedKeys = [
      'notifications_enabled',
      'backup_settings',
      'theme_mode',
      'language',
    ];

    for (final key in expectedKeys) {
      if (!settings.containsKey(key)) {
        warnings.add('Configura√ß√£o "$key" n√£o encontrada');
      }
    }

    return Right(warnings);
  }

  // ===== UTILIT√ÅRIOS =====

  /// Valida se uma string √© uma data v√°lida
  bool _isValidDate(dynamic dateValue) {
    if (dateValue == null) return false;

    try {
      if (dateValue is String) {
        DateTime.parse(dateValue);
        return true;
      }
      return false;
    } catch (e) {
      return false;
    }
  }

  /// Conta total de itens validados
  int _countValidatedItems(BackupModel backup) {
    return backup.data.plants.length +
        backup.data.tasks.length +
        backup.data.spaces.length;
  }
}

/// Resultado da valida√ß√£o de um backup
class ValidationResult {
  final bool isValid;
  final List<String> errors;
  final List<String> warnings;
  final int validatedItemsCount;

  const ValidationResult({
    required this.isValid,
    required this.errors,
    required this.warnings,
    required this.validatedItemsCount,
  });

  bool get hasWarnings => warnings.isNotEmpty;
  bool get hasErrors => errors.isNotEmpty;

  @override
  String toString() {
    return 'ValidationResult(isValid: $isValid, errors: ${errors.length}, '
        'warnings: ${warnings.length}, items: $validatedItemsCount)';
  }
}
